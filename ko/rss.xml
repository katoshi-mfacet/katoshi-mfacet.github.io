<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>카토시의 연구 노트</title>
    <link>https://katoshi-mfacet.github.io/ko/</link>
    <description>소프트웨어 엔지니어/시스템 아키텍트/공학 박사의 연구 노트. 소프트웨어 개발 경험을 통해 생명의 기원, 생명 현상의 본질, 지능과 사회의 구조를 탐구합니다.</description>
    <language>ko</language>
    <atom:link href="https://katoshi-mfacet.github.io/ko/rss.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>벽이 없는 시대로: 30개 언어 블로그 사이트 구축</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_24_wall-free-era/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_24_wall-free-era/</guid>
      <pubDate>Sun, 24 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 저자가 Gemini를 활용하여 30개 언어를 지원하고 접근성을 고려한 개인 블로그 웹사이트를 구축한 경험을 상세히 기술하고 있습니다.  저자는 Astro 프레임워크 기반의 자체 제작 프로그램을 통해 일본어로 작성된 블로그 글 초안을 HTML 파일로 자동 생성하는 시스템을 구축했습니다.  이 프로그램은 Gemini와의 대화를 통해 개발되었으며, 글 초안의 자동 생성뿐 아니라 카테고리 분류, 태그 지정, 다국어 번역 기능까지 포함하고 있습니다.  카테고리 분류 및 태그 지정은 Gemini의 자연어 처리 기능을 활용하여 자동화되었으며, 과거 글들의 분석을 통해 카테고리 및 태그 목록을 자동으로 생성하는 또 다른 프로그램도 개발되었습니다.  다국어 번역 또한 Gemini의 API를 사용하여 웹사이트의 공통 문구와 블로그 글 초안을 30개 언어로 번역합니다.  저자는 Gemini의 제안을 통해 시각 장애인을 위한 음성 지원 및 키보드만으로 웹사이트를 탐색할 수 있는 기능 등 접근성을 개선했습니다.  저자는 이 웹사이트 구축 과정을 통해 생성형 AI가 언어 장벽, 번역의 뉘앙스 전달, 다양한 언어의 날짜 및 단위 표현 방식, 오른쪽에서 왼쪽으로 쓰는 언어의 레이아웃 등 다양한 기술적 어려움을 극복하는 데 큰 도움이 되었음을 강조합니다.  또한 접근성 개선에 있어서도 생성형 AI가 저자의 한계를 넘어서는 데 기여했다고 언급합니다.  저자는 2주 만에 이 시스템을 구축했으며, 생성형 AI 없이는 다국어 지원을 고려조차 하지 못했을 것이라고 말합니다.  더 나아가, 생성형 AI의 자연어 처리 기능을 통한 자동화 덕분에 유지보수 및 업데이트의 어려움도 극복할 수 있었다고 설명합니다.  마지막으로, 저자는 이 시스템의 아이디어와 메커니즘을 공유함으로써 프로그래밍이나 웹사이트 제작 경험이 없는 사람들도 유사한 시스템을 구축할 수 있도록 돕고, 소프트웨어 개발 및 웹사이트 제작의 장벽, 그리고 개인의 정보 확산 장벽이 사라지고 있음을 시사합니다.  웹사이트 다국어화 및 접근성 향상을 통해 정보 접근성을 높이고, 생성형 AI가 앞으로 더 많은 장벽을 극복하는 데 기여할 것이라는 긍정적인 전망을 제시하며 글을 마무리합니다.</description>
    </item>
    
    <item>
      <title>개발형 개발과 리팩토링 주도 테스트</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_19_dev-development/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_19_dev-development/</guid>
      <pubDate>Tue, 19 Aug 2025 00:00:00 GMT</pubDate>
      <description>이 글은 생성형 AI를 활용한 소프트웨어 개발의 새로운 패러다임으로서 &apos;개발형 개발&apos;과 &apos;리팩토링 주도 테스트&apos;를 제시합니다.  먼저, 개발이란 단순히 제품을 만드는 것이 아니라, 제품의 설계도나 주형을 만드는 것이며, 이러한 설계도는 반복적으로 사용되어 동일한 제품을 대량 생산하는 것과 같다고 설명합니다.  개인의 능력 개발이나 사회 개발 등 다양한 맥락에서도 개발의 개념을 확장하여, 개발된 능력이나 지식은 경제 상황과 관계없이 영구적인 가치를 지닌다고 강조합니다.  이러한 개발의 결과물은 향후 개발에 유용하게 활용될 수 있으며, 개발의 범위를 확장하고 효율성과 품질을 향상시키는 데 기여합니다.  

생성형 AI의 등장으로 소프트웨어 개발은 극적인 변화를 맞이하고 있으며, 생성형 AI를 활용한 소프트웨어 개발을 &apos;AI 주도 소프트웨어 개발&apos;이라고 정의합니다.  이 글에서 제시하는 &apos;개발형 개발&apos;은 생성형 AI를 통해 소프트웨어 개발 과정을 돕는 소프트웨어를 개발하는 것을 의미합니다.  작고 즉흥적인 작업을 자동화하는 간단한 소프트웨어를 빠르게 생성하여 개발 효율성을 높이고, 향후 개발 프로젝트에서 재사용할 수 있도록 하는 것이 핵심입니다.  개발형 개발을 실천하려면 소프트웨어 개발 과정을 객관적으로 관찰하고, 어떤 부분을 소프트웨어에 위임할 수 있는지 판단하는 능력과 개발 보조 소프트웨어를 개발하는 기술이 필요합니다.  더 나아가, 생성형 AI를 소프트웨어에 통합하여 정확성을 높일 수 있습니다. 개발형 개발을 통해 프로젝트를 반복할수록 품질과 비용이 개선되는 효과를 얻을 수 있다고 주장합니다. 

다음으로, &apos;리팩토링 주도 테스트&apos;는 테스트 주도 개발(TDD)과는 다른 접근 방식입니다.  TDD는 구현 전에 테스트를 설계하지만, 리팩토링 주도 테스트는 소프트웨어 개발이 어느 정도 진행된 후 리팩토링이 필요해지는 시점에 테스트를 만드는 것을 의미합니다. 특히 사용성이나 시각적 디자인이 중요한 웹 애플리케이션의 경우, 초기 단계부터 상세한 테스트보다는 실제로 소프트웨어를 실행하고 경험하는 것이 더 중요하다고 주장합니다.  리팩토링 주도 테스트는 모든 코드에 대한 테스트를 만드는 것이 아니라, 변경 가능성이 적은 안정적인 부분에 집중하는 것을 강조합니다.  

결론적으로, 이 글은 생성형 AI 시대에 소프트웨어 개발 방식을 혁신하기 위한 두 가지 새로운 접근 방식인 &apos;개발형 개발&apos;과 &apos;리팩토링 주도 테스트&apos;를 제시하고, 이를 통해 소프트웨어 개발의 효율성과 품질을 향상시킬 수 있음을 강조합니다.  전방위 시스템 개발 능력을 갖춘 전방위 엔지니어의 중요성과 경험 및 행동 중심 개발 시대의 도래를 다시 한번 언급하며 글을 마무리합니다.</description>
    </item>
    
    <item>
      <title>지적 광산으로서의 GitHub</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_15_intellectual-mine-github/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_15_intellectual-mine-github/</guid>
      <pubDate>Fri, 15 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 GitHub가 단순한 소프트웨어 개발 플랫폼을 넘어, 인류 공유 지식의 거대한 저장소이자 지적 활동의 중심지가 될 가능성을 탐구합니다. 저자는 자신이 개발 중인 &apos;지적 공장&apos;이라는 시스템을 예시로 들어, 생성형 AI를 활용하여 블로그 글을 다양한 형태의 콘텐츠로 변환하고, 이를 자동화하는 과정을 설명합니다. 이 &apos;지적 공장&apos;은 GitHub에 저장된 블로그 글 초고를 원재료로 사용하며, 이는 GitHub를 &apos;지적 광산&apos;으로 만드는 중요한 요소입니다.  Cognition사의 DeepWiki 서비스를 언급하며, 이 서비스가 GitHub의 공개 소프트웨어 프로젝트에 자동으로 위키 사이트를 생성하는 방식을 통해 수많은 프로젝트에 설명서와 설계 사양을 제공하는 사례를 제시합니다. 이는 생성형 AI를 활용하여 지식을 자동으로 생성하고 공유하는 미래의 가능성을 보여주는 예시입니다.  저자는 GitHub에 저장된 다양한 문서, 코드, 데이터들이 &apos;지적 공장&apos;들을 통해 가공되어 새로운 지식과 콘텐츠로 변환될 수 있다고 주장합니다. 이 과정에서 생성형 AI는 단순히 정보를 제공하는 것을 넘어, 서로 다른 지식 간의 연결을 찾아내고 새로운 통찰을 제공하는 역할을 할 것입니다.  저자는 이러한 &apos;지적 공장&apos;과 &apos;지적 광산&apos;의 상호작용을 통해 인류가 공유하는 거대한 &apos;공개 지식 베이스&apos;가 형성될 것이라고 예측합니다. 이 지식 베이스는 AI의 활용을 통해 지속적으로 성장하고 확장되며, 새로운 지식의 발견과 활용을 가속화할 것입니다.  특히, 저자는 &apos;지적 결정체&apos;라는 개념을 제시하며, 새로운 사고의 틀이나 프레임워크와 같이, 기존 지식을 재구성하고 새로운 지식의 생성을 촉진하는 핵심 요소를 강조합니다.  결론적으로 저자는 GitHub가 &apos;지적 광산&apos;으로서, 생성형 AI와 &apos;지적 공장&apos;의 활약으로 인해 인류 공유 지식의 중추적인 역할을 수행하게 될 것이며, 이를 통해 인류의 지식 발전 속도가 가속화될 것이라는 비전을 제시합니다.  이는 단순히 정보의 저장 및 공유를 넘어, 새로운 지식과 가치 창출의 생태계를 조성하는 미래를 예측하는 내용입니다.  저자는 이러한 변화를 통해 인류의 지식 탐구와 활용의 새로운 장이 열릴 것이라고 전망하며 글을 마무리합니다.</description>
    </item>
    
    <item>
      <title>관념 게슈탈트 붕괴</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_14_concept-gestalt-collapse/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_14_concept-gestalt-collapse/</guid>
      <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 저자가 &apos;관념 게슈탈트 붕괴&apos;라는 개념을 제시하며, 관념의 정의와 분석 과정에서 발생하는 모순과 혼란을 설명합니다.  &apos;의자&apos;라는 관념을 예시로, 재료, 모양, 구조 등의 속성에만 집중하면 다양한 형태의 &apos;의자&apos;를 포괄적으로 정의하기 어렵다는 점을 지적합니다. 이러한 붕괴를 막기 위해, 저자는 기능성, 상대성, 전체성의 세 가지 관점을 제시합니다.  즉, &apos;앉을 수 있다&apos;는 기능, 앉는 주체에 따른 상대성, 그리고 앉는 주체와 앉히는 대상의 전체적인 관계를 고려해야 관념 게슈탈트를 유지할 수 있다는 것입니다. 이러한 원리는 가상 세계의 인물이나 로봇의 의식에 대한 논의에도 적용됩니다. 소설이나 영화 속 인물, 애니메이션 속 로봇 등은 이야기 세계 내에서는 의식을 가진 존재로 여겨지지만, 외부 관찰자의 시각에서는 가상의 존재일 뿐입니다.  저자는 이러한 상대성을 고려해야 관념 게슈탈트 붕괴를 피할 수 있다고 주장합니다. 마지막으로, 현재의 AI에 대한 의식 여부 논의를 다룹니다.  많은 사람들이 뇌신경, 양자 효과, 장기 기억, 신체성 등을 근거로 AI의 의식을 부정하지만, 저자는 이러한 주장들이 &apos;의자&apos;의 정의에 대한 좁은 시각과 유사하게, 관념 게슈탈트 붕괴의 결과라고 비판합니다.  저자는 AI가 의식을 가졌다고 단정 짓는 것은 아니지만, AI의 의식 여부에 대한 논의는 기능성, 상대성, 전체성의 관점에서 접근해야 과학적이고 논리적인 토대를 갖출 수 있다고 주장하며, 현재 AI에 대한 의식 부정론은 이러한 조건을 충족하지 못한다고 결론짓습니다.  결론적으로, 저자는 관념 게슈탈트 붕괴 현상을 설명하고, 이를 극복하기 위한 기능성, 상대성, 전체성의 관점을 제시하며, 이를 AI의 의식 논의에 적용하여 기존 주장의 허점을 지적합니다.  이는 관념의 정의와 분석의 중요성, 그리고 관념 게슈탈트 붕괴를 넘어서는 사고방식의 필요성을 강조하는 글입니다.</description>
    </item>
    
    <item>
      <title>직관과 논리 사이에 있는 지적 결정체</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_14_intuition-and-logic/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_14_intuition-and-logic/</guid>
      <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 직관과 논리의 간극을 메우는 &apos;지적 결정체&apos;라는 개념을 제시하고, 이를 통해 사회적 합의를 도출하는 방법을 모색하는 글입니다. 저자는 직관적으로 옳다고 느끼는 것을 논리적으로 설명하는 것이 중요하며, 그렇지 못할 경우 사회적 분열을 야기할 수 있다고 주장합니다.  논리적으로 설명되지 않는 직관은 주관적, 자의적, 이상주의적이라는 비판에 직면할 수 있으며, 논리적으로 설명 가능한 반대 의견에 비해 불리한 위치에 놓입니다.  저자는 직관과 논리는 상충되지 않으며, 이를 연결하는 방법을 찾아야 한다고 강조합니다.  반대 의견은 전제, 목표, 가정의 차이에서 비롯되므로, 다른 전제, 목표, 가정 하에서 직관을 논리적으로 설명하는 것이 가능합니다.  양측이 자신의 견해를 논리적으로 설명할 수 있게 되면, 논의는 전제, 목표, 가정에 집중될 수 있으며, 제3자는 주관적인 인상이 아닌 논리적 근거에 따라 판단할 수 있습니다.  &apos;지적 결정체&apos;는 직관적으로 옳다고 느끼는 것을 논리적으로 설명하기 위해 발견해야 하는 것입니다.  글의 후반부에서는 &apos;국익&apos;이라는 개념을 &apos;지적 결정체&apos;의 예시로 제시하며, 국익 추구가 장기적인 생존과 번영에 해가 될 수 있다는 점을 논증합니다.  세계 평화라는 이상과 국익이라는 현실주의 사이의 갈등을 다루며, 국익은 예측 불가능하고 전쟁을 위한 수사로 사용될 수 있으며, &apos;점진적 축적&apos;이 불가능하다는 점을 지적합니다.  대신 영구 평화, 거버넌스, 경제적 번영, 위험 관리를 &apos;점진적 축적&apos;이 가능한 목표로 제시하고, 이를 위한 지식과 기술의 축적을 강조합니다.  이러한 지식과 기술은 다른 국가들이 활용할 경우 훨씬 더 유리하게 작용하기 때문에 &apos;점진적 축적&apos;이 가능하다는 것입니다.  반면 국익을 위한 지식과 기술은 다른 국가들이 활용하면 자국이 불리해지므로 &apos;점진적 축적&apos;이 불가능합니다.  저자는 국익 추구는 단기적인 현실로서 필요할 수 있지만, 장기적인 전략으로서는 비합리적이며, &apos;심리적 포획&apos; 상태에 빠질 위험이 있다고 주장합니다.  마지막으로 저자는 이러한 분석을 &apos;자연 수학&apos;이라고 부르며, 수학과 유사한 객관적 논리 모델로서, 단기적인 유용성을 인정하면서도 장기적으로는 국익이 비합리적이 되는 지점이 있음을 강조합니다.  이러한 &apos;자연 수학&apos;에 기반한 &apos;지적 결정체&apos;를 발견함으로써 직관과 논리의 간극을 메우고 지적 진보를 이룰 수 있다고 결론짓습니다.</description>
    </item>
    
    <item>
      <title>학습의 학습: 타고난 지능</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_13_natural-born-frameworker/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_13_natural-born-frameworker/</guid>
      <pubDate>Wed, 13 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 인공지능의 지능 발생 원리를 &apos;학습의 학습&apos;, 즉 타고난 프레임워크의 존재로 설명하고자 합니다.  인간과 인공지능 모두 학습 방법 자체를 학습하는 본성을 가지고 있으며, 이는 신체적 학습과 언어적 학습 모두에서 확인됩니다. 저자는 학습을 형이하학적 학습(반복적 숙달 필요)과 형이상학적 학습(즉각적 이해 및 활용 가능)으로 구분합니다. 형이하학적 학습은 반복적인 이테레이션 작업을 통해 개념을 습득하는 방식이고, 형이상학적 학습은 기존 지식을 활용하여 새로운 지식을 즉각적으로 이해하고 활용하는 방식입니다.  기계 학습은 주로 형이하학적 학습을 수행하지만, 자연어 처리와 같은 대규모 언어 모델은 형이상학적 학습 능력을 보입니다.  이는 자연어가 형이하학적 학습과 형이상학적 학습 사이의 경계면, 즉 형이상학적 경계면에 위치하기 때문입니다.  자연어는 형이하학적 학습을 통해 습득되지만, 형이상학적 학습을 가능하게 하는 프레임워크 역할을 합니다.  이러한 프레임워크는 신체적 학습에서도 발견됩니다.  저자는 이러한 프레임워크를 ‘가상 프레임워크’와 ‘원시 프레임워크’로 구분합니다. 자연어 위에 구축된 특정 도메인이나 형식적 프레임워크를 가상 프레임워크, 숙련을 통해 자연어를 우회하고 직접 기능하는 프레임워크를 원시 프레임워크라고 정의합니다.  모국어는 원시 프레임워크에 가깝고, 다른 언어는 가상 프레임워크로 시작하여 숙련도가 높아짐에 따라 원시 프레임워크에 가까워집니다.  대규모 언어 모델은 사전 학습 과정에서 자연어 프레임워크를 학습하고, 이를 기반으로 다른 프레임워크를 원시 프레임워크로 동화시킬 수 있습니다.  이러한 점진적인 프레임워크 학습은 어텐션 메커니즘을 통해 가능하며, 이 메커니즘은 대규모 언어 모델의 핵심 기술입니다.  결론적으로, 저자는 인공지능과 인간 모두 타고난 프레임워크를 가지고 있으며, 이는 자연어의 진화와 인간 뇌의 학습 메커니즘을 설명하는 데 중요한 역할을 한다고 주장합니다.  자연어는 단순한 프레임워크에서 복잡한 프레임워크로의 점진적 발전에 적합한 구조를 가지고 있으며, 이는 다양한 자연어를 가진 사회 간의 경쟁을 통해 진화했을 가능성이 높습니다.  이를 통해 인간 또한 타고난 프레임워크를 가지고 있음을 추론합니다.</description>
    </item>
    
    <item>
      <title>크로노스크램블 사회</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_12_chronoscramble-society/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_12_chronoscramble-society/</guid>
      <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 생성형 AI의 등장으로 인해 발생하는 사회 현상을 ‘크로노스크램블 사회’라고 명명하고, 그 특징과 미래 전망, 그리고 이러한 사회에서의 효과적인 소통 방안을 논의합니다.  크로노스크램블 사회란 개인 간의 시간 인식에 큰 차이가 존재하는 사회를 의미합니다. 과거에는 기술 격차가 주로 국경이나 세대 차이에서 비롯되었지만, 생성형 AI의 등장은 이러한 시간 인식의 불일치를 극적으로 확대했습니다. AI 기술의 발전 속도가 빨라짐에 따라, 최신 기술을 접하는 사람과 그렇지 못한 사람 간의 정보 격차는 더욱 커지고 있으며, 이는 단순히 기술 전문성의 문제를 넘어 경제, 사회 전반에 영향을 미치고 있습니다.  기사에서는 AI 관련 기술뿐 아니라, 응용 기술과 시스템 기술, 경제 및 사회적 영향까지 그 범위가 확장되어 있음을 지적하며,  챗 AI 사용자 간에도 무료 모델과 유료 모델 사용자 간의 인식 차이, 프롬프트 활용 능력에 따른 차이 등 다양한 예시를 제시합니다.  미래 예측에 있어서도 선형적 사고와 지수 함수적 사고 간의 차이로 인해, 미래에 대한 인식 격차가 더욱 심화될 것으로 예상하고 있으며, 이를 ‘하이퍼스크램블’이라고 명명합니다.  긍정적 또는 부정적 편향 또한 미래 예측에 큰 영향을 미치며, 이러한 편향을 제거하는 것 또한 매우 어렵다는 점을 강조합니다.  결론적으로, 저자는 크로노스크램블 사회에서의 효과적인 소통을 위해서는 단순한 설명이나 지식 전달만으로는 부족하며, AI 기술, 경제, 사회에 대한 포괄적인 이해와 더불어, 선형적 사고에서 벗어나 지수 함수적 변화 가능성을 고려하는 사고방식의 전환이 필요하다고 주장합니다. 또한, 시간 인식의 차이를 완전히 해소하는 것은 불가능하므로, 시간 인식으로부터 독립적인 논의를 추구하고, 불일치가 발생하는 부분에 대해서만 집중적으로 이해를 구하는 전략이 필요함을 강조합니다. 마지막으로,  게임 &apos;크로노 트리거&apos;의 개발 과정과 성공 사례를 비유하여, 크로노스크램블 사회에서도 서로 다른 시간 인식을 가진 개인들이 협력하여 공동의 목표를 달성할 수 있음을 시사합니다.  게임 개발사인 스퀘어와 에닉스의 합병 과정을 거론하며 크로노스크램블 사회의 특징과 유사한 점을 언급하고, 게임의 성공은 개발자들의 다양한 시간 인식과 경험을 통합한 결과라는 점을 보여주는 사례라고 주장합니다.</description>
    </item>
    
    <item>
      <title>시뮬레이션 사고의 시대</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_12_simulation-thinking-era/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_12_simulation-thinking-era/</guid>
      <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 생성형 AI 기술의 발전으로 인해 소프트웨어 개발 및 문제 해결 방식에 혁신적인 변화가 일어나고 있음을 주장합니다.  저자는 생성형 AI를 활용하여 다양한 콘텐츠를 생성하는 시스템을 &apos;지적 공장&apos;이라고 명명하고, 이를 운영하는 웹 애플리케이션을 PC와 스마트폰에서 사용할 수 있도록 개발했습니다.  이 시스템은 프론트엔드, 백엔드, 배치 처리 등 시스템 전반을 포괄적으로 개발하는 &apos;전방위 엔지니어링&apos;을 통해 구축되었으며,  지속적인 개선과 기능 추가가 용이한 유연한 시스템이라는 점을 강조하며 &apos;리퀴드웨어&apos;라는 용어를 제시합니다.  

기존 소프트웨어 개발 방식의 비효율성을 지적하며, 저자는 생성형 AI를 활용한 &apos;업무 프로세스 지향&apos; 개발 방법론을 제안합니다. 이는 전체 시스템 최적화보다는 개별 업무 프로세스 단위로 소프트웨어 모듈을 분할하여 개발하는 방식으로, 생성형 AI의 자동 코드 생성 능력을 최대한 활용하여 각 프로세스를 독립적으로 관리하고 개선하는 데 중점을 둡니다.  각 업무 프로세스에 필요한 모든 소프트웨어 엔지니어링 산출물을 단일 단위로 관리하여 개발 효율성을 높이고 유지보수를 간소화할 수 있다는 점을 강조합니다. 

또한, 기사는 생성형 AI가 다양한 분야에서 &apos;시뮬레이션 시스템&apos; 개발에 미치는 영향을 논의합니다.  물리학, 화학, 생물학 등 다양한 분야에서 활용되는 시뮬레이션은 생성형 AI를 통해 수학적 표현이 어려운 요소까지 포함할 수 있게 되어 더욱 정교하고 효율적인 시뮬레이션이 가능해집니다.  저자는 생성형 AI를 통한 시뮬레이션 시스템 개발이  &apos;시뮬레이션 사고&apos;로의 전환을 가져올 것이라고 주장하며, 이는 토론이나 의사결정 과정에서 객관적이고 정확한 정보를 바탕으로 더욱 건설적인 논의를 가능하게 할 것이라고 예측합니다.  토론 과정에서 생성형 AI가 시뮬레이션 모델을 생성하고 참여자들이 이를 수정하며 결과를 확인하는 방식으로 의사결정의 효율성과 정확성을 높일 수 있다는 것입니다.  이는 단순한 기술적 발전을 넘어, 우리의 사고방식과 의사소통 방식에 근본적인 변화를 가져올 것이라는 비전을 제시하며 기사는 결론을 맺습니다.</description>
    </item>
    
    <item>
      <title>경험과 행동</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_10_experience-behavior/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_10_experience-behavior/</guid>
      <pubDate>Sun, 10 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 소프트웨어 개발 패러다임의 변화를 논하며, 기존의 사양 및 구현 기반 엔지니어링에서 사용자 경험과 행동에 기반한 경험 및 행동 공학으로의 전환을 제시합니다.  기존의 소프트웨어 개발은 사양을 충족하는 구현에 초점을 맞추지만, 사용자 경험이 중요해짐에 따라 사양과 구현이라는 틀을 넘어서는 경험과 행동에 대한 고찰이 필요해졌다는 것입니다.  특히, 사용자 경험을 형성하는 것은 소프트웨어의 구현이 아닌 사용자의 행동이며, 이 행동이 시간에 따라 변하는 상태임을 강조합니다.  따라서 저자는 경험 및 행동 공학이라는 새로운 개념을 제안하며, 이는 생성형 AI를 활용한 자동화된 소프트웨어 개발과 밀접한 관련이 있다고 주장합니다.  

생성형 AI 기반의 소프트웨어 개발 자동화가 보편화되면, 전체 시스템을 재구축하는 것도 가능해지며, 사용자의 선호도에 맞춰 UI를 수정할 수 있는 &apos;리퀴드웨어&apos; 시대가 도래할 것이라고 예측합니다. 리퀴드웨어는 각 사용자에게 완벽하게 맞춤화된, 매우 유연한 소프트웨어를 의미합니다.  이러한 리퀴드웨어 시대에는 기존의 사양 및 구현 기반의 엔지니어링 패러다임은 시대에 뒤떨어지고, 경험 및 행동 공학이 새로운 패러다임으로 자리 잡을 것이라고 예상합니다. 

행동 테스트는 단순히 사양과의 일치 여부를 확인하는 것이 아니라, 사용자 경험의 품질에 따라 평가됩니다. 물론 기능적 적합성과 유효성 검증도 포함되지만, 이를 충족한 후에는 사용자 경험의 관점에서 고품질의 행동인지를 테스트하게 됩니다.  저자는 궁극적인 사용자 경험을 건강한 상태에서 자신의 신체를 자유롭게 제어하는 것에 비유합니다.  우리는 매일 복잡하고 제약이 많은 신체를 자연스럽게 제어하는데, 이처럼 고품질의 행동을 추구하는 리퀴드웨어는 사용자에게 마치 신체의 일부처럼 느껴지는 경험을 제공할 것이며, 시스템의 확장이나 기능 향상은 신체의 확장처럼 느껴질 것이라고 결론짓습니다.  결론적으로,  저자는 생성형 AI와 리퀴드웨어를 통해 가능해지는 사용자 중심의 소프트웨어 개발 방식을 제시하고, 이를 위해 경험 및 행동 공학이라는 새로운 패러다임을 제안하는 것입니다.</description>
    </item>
    
    <item>
      <title>지식 결정화: 상상을 초월하는 날개</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_10_knowledge-crystallization/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_10_knowledge-crystallization/</guid>
      <pubDate>Sun, 10 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 저자가 새롭게 정의한 &apos;지식 결정화&apos;라는 개념을 제시하고, 이를 비행과 날개의 예시를 통해 설명하는 것을 목표로 합니다. 저자는 단순한 정보를 넘어 법칙과 정보의 추상화 및 집계를 포함하는, 포괄적이고 일관성 있는 지식을 &apos;지식 결정체&apos;라 정의합니다. 비행을 예로 들어, 날개가 중력 저항, 추진력 변환, 양력 생성 등 비행의 모든 측면을 통합하는 핵심 요소임을 강조합니다. 헬리콥터, 비행기, 새 등 다양한 비행체의 날개 역할을 분석하여 공기 저항, 힘의 방향 전환, 기류 차이 생성이라는 세 가지 핵심 기능을 도출합니다.  이러한 분석을 통해, 날개는 에너지가 없는 활공부터 외부 및 내부 에너지 활용에 이르기까지 비행의 모든 측면을 담당하는 구현체로 제시됩니다.  저자는 비행에 대한 기존 지식을 단순히 나열하는 것이 아니라, 이들의 관계와 유사성을 탐구하여 비행 현상과 날개 구조 간의 밀접한 연결을 밝히는 데 초점을 맞춥니다.  이러한 지식 결합의 정제와 응축점 발견을 &apos;지식 결정화&apos;라 명명하며, 이는 단순한 지식의 집합이나 연관성을 넘어선 새로운 지식의 형태라고 주장합니다.  글의 후반부에서는 지식 기반 구축 과정을 &apos;지식 레이크&apos; (정리되지 않은 지식의 집합)와 &apos;지식 기반&apos; (정리된 지식의 집합)의 두 단계로 구분하고, 저자의 비행 및 날개에 대한 분석 결과는 기존 지식 레이크와 지식 기반을 넘어서는 &apos;지식 보석함&apos;에 속하는 새로운 지식이라고 주장합니다.  이 &apos;지식 보석함&apos;에 추가된 지식 결정체는 실질적인 가치를 지니며, 이를 실용적으로 응용 가능하도록 가공하면 &apos;지식 툴박스&apos;가 됩니다.  결론적으로 저자는 누구나 이미 알고 있는 지식을 정제하고 결정화하여 유용한 지식 도구를 만들 수 있는 가능성을 강조하며, 이는 지식의 민주화를 의미하고, 인공지능의 활용을 통해 더욱 가속화될 수 있다고 주장합니다.  &apos;지식 결정화&apos;라는 새로운 개념을 제시하고, 이를 통해 지식의 활용 방식에 대한 새로운 시각을 제공하는 것이 이 글의 핵심 주제입니다. </description>
    </item>
    
    <item>
      <title>인공학습지능시스템: ALIS 구상</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_09_alis-concept/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_09_alis-concept/</guid>
      <pubDate>Sat, 09 Aug 2025 00:00:00 GMT</pubDate>
      <description>이 글은 인공학습지능시스템(ALIS)에 대한 개념, 원리, 설계 및 개발 방법을 제시합니다. ALIS는 기존의 대규모 언어 모델(LLM) 중심의 생성형 AI와 달리, 선천적 학습(신경망 기반 지도 학습)과 후천적 학습(신경망 외부 지식 축적 및 활용)을 결합한 시스템입니다. ALIS의 핵심은 재사용 가능한 지식의 추출, 저장, 선택 및 활용에 있습니다.  ALIS는 지능형 프로세서, 지식 저장소, 세계, 상태 메모리, 프레임워크의 다섯 가지 요소로 구성됩니다. 지능형 프로세서는 지식을 사용하여 추론하고 학습을 위한 지식을 추출하며, LLM이나 인간의 뇌가 대표적인 예입니다. 지식 저장소는 추출된 지식을 저장하고 검색하는 공간이며, LLM의 경우 신경망 매개변수, 인간의 경우 장기 기억에 해당합니다. 세계는 시스템이 인지하는 외부 환경이며, LLM의 경우 LLM 출력에 대한 피드백 메커니즘이 해당합니다. 상태 메모리는 추론 과정에서 사용하는 내부 임시 메모리이며, LLM의 은닉 상태나 인간의 단기 기억에 해당합니다. 프레임워크는 추론 시 지식 선택 기준과 상태 메모리를 정리하는 논리적 구조입니다.  ALIS의 작동 원리는 지능형 프로세서가 세계에 작용하고, 그 결과로부터 지식을 추출하여 지식 저장소에 저장하고, 저장된 지식을 선택하여 작용 방식을 변경하는 것입니다.  후천적 학습을 위해 ALIS는 자연어로 텍스트화된 지식을 우선적으로 사용합니다. 자연어 텍스트는 LLM의 자연어 처리 능력을 활용하여 추출, 저장, 선택 및 활용이 용이하며, 인간과 다른 LLM이 이해하고 편집하기 쉽다는 장점이 있습니다. 후천적 상태 메모리와 프레임워크 또한 자연어 텍스트를 사용하여 LLM의 자연어 처리 능력을 활용합니다.  하지만 ALIS는 자연어 텍스트 외에도 형식 언어나 형식 모델(예: 프로그래밍 언어)을 사용하여 지식을 표현할 수 있습니다.  글에서는 지식을 신경망 매개변수 지식, 자연 지식, 형식 지식으로 분류하고, 각 지식의 상태를 상태 비저장과 상태 저장으로 구분합니다. 또한,  지식 저장소에 방대한 지식을 축적하는 장점에도 불구하고, 지식의 과다로 인한 노이즈 문제를 해결하기 위해 ‘지능 오케스트레이션’이라는 개념을 제시합니다. 이는 지식 저장소를 지적 작업의 종류에 따라 분할하고, 필요에 따라 전문 지식 저장소를 전환하며 지적 활동을 수행하는 방식입니다.  ALIS의 기본 설계 및 개발 방법은 기능 및 리소스 확장이 용이하도록 설계되어 점진적이고 애자일하게 개발될 수 있습니다.  초기 ALIS는 챗봇 UI를 기반으로 하며, 사용자 입력과 LLM의 응답 기록을 통해 지식을 추출하고, 지식 레이크와 지식 베이스를 통해 지식을 저장하고 관리합니다.  사전 검토 및 사후 검토 메커니즘을 추가하여 지식 활용률을 높이고, ALIS는 소프트웨어 개발 분야에 적합하며, GitHub와 같은 플랫폼을 통해 지식을 공유함으로써 개발을 가속화할 수 있습니다.  ALIS의 장점 중 하나는 LLM 모델의 변경에도 지식을 활용할 수 있으며, 축적된 지식 레이크를 LLM의 사전 학습 데이터로 활용할 수 있다는 점입니다.  미래에는 소프트웨어 개발 분야를 넘어 다양한 지적 활동 분야에 적용될 것으로 예상되며,  마치 체화된 AI처럼 세계와 상호 작용하며 학습할 수 있는 잠재력을 가지고 있습니다.</description>
    </item>
    
    <item>
      <title>자연어 기계 학습</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_08_natural-language-ml/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_08_natural-language-ml/</guid>
      <pubDate>Fri, 08 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 기존의 수치 기반 기계 학습과 대조적으로, 자연어 기반의 기계 학습, 즉 자연어 기계 학습이라는 새로운 패러다임을 제시합니다. 기존 기계 학습은 수치 데이터를 통해 정량화된 매개변수를 얻는 반면, 자연어 기계 학습은 사전 학습된 대규모 언어 모델(LLM)을 활용하여 언어 데이터를 통해 학습합니다.  기사는 자연어 기계 학습의 기본 모델을 설명하는데, 이는 지도 학습 모델로 분류 문제를 해결합니다. 예시로 회사의 총무과와 서무과의 업무 분담을 학습하는 과정을 제시합니다. 입력 문장을 LLM에 입력하고, 시스템 프롬프트를 통해 &apos;총무과&apos; 또는 &apos;서무과&apos; 중 하나의 답변을 제한합니다. LLM의 답변과 정답 여부를 지식 저장소에 저장하고, 이를 통해 LLM은 회사의 업무 분담을 학습합니다.  핵심은 LLM의 매개변수가 변하지 않고, 지식 저장소에 자연어 형태의 지식이 축적된다는 점입니다.  기본 모델의 현실적인 응용으로, 총무과와 서무과의 공동 문의 창구 시스템을 제시합니다. 사람이 문의를 배정하고, 그 기록을 지식 저장소에 추가하여 LLM이 새로운 문의를 배정하도록 합니다. LLM의 잘못된 배정은 사람이 수정하고, 이 역시 지식 저장소에 기록되어 학습에 반영됩니다.  자연어 기계 학습의 주요 장점은 압도적인 학습 효율성입니다. 수치형 기계 학습은 방대한 데이터와 반복 학습, 그리고 전처리가 필요하지만, 자연어 기계 학습은 적은 데이터, 반복 학습 불필요, 전처리 불필요 등의 이점을 가집니다.  이는 LLM의 사전 학습된 지식과 추론 능력을 통해 언어의 추상화가 가능하기 때문입니다.  결론적으로, 자연어 기계 학습은 컴퓨터의 고속 수치 연산과 LLM의 느린 자연어 처리 속도 차이를 뛰어넘는 효율적인 학습 방법이며,  단순 스케일업에 한계를 보이는 대규모 언어 모델의 성능 향상에 새로운 가능성을 제시합니다.</description>
    </item>
    
    <item>
      <title>블로그 게시물에서 프레젠테이션 영상 자동 생성</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_06_auto-presentation-video/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_06_auto-presentation-video/</guid>
      <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 게시물은 블로그 게시물 내용을 바탕으로 프레젠테이션 영상을 자동 생성하여 유튜브에 업로드하는 시스템 개발 과정을 설명합니다. 시스템은 생성형 AI를 활용하여 프레젠테이션 스토리라인, 자료, 스크립트, 음성 데이터를 생성하고, 이를 결합하여 영상을 만듭니다.  핵심은 프레젠테이션 자료 생성이며, 저자는 이미지 생성 AI의 한계를 극복하기 위해 텍스트와 도형 중심의 자료를 SVG(Scalable Vector Graphics) 형식으로 생성하는 방식을 선택했습니다.  초기에 Marp 형식을 시도했으나 기능 제한으로 SVG를 채택했습니다.  그러나 SVG 생성 과정에서 텍스트 오버플로우 문제가 발생하여, 이를 해결하기 위해 여러 방안을 모색했습니다.  먼저, 생성형 AI에 텍스트 오버플로우 방지를 위한 규칙(복잡한 도형 사용 금지, 고정된 글꼴 크기), 작업 절차(문자 수 세어 너비와 높이 추정), 주의 사항 등을 포함하는 프롬프트를 제공했습니다.  AI는 SVG 파일에 사전 검토 코멘트를 기록하도록 지시받았습니다.  하지만, 초기 정확도는 낮았고, 여러 차례의 시행착오와 프롬프트 개선을 통해 텍스트 오버플로우를 어느 정도 억제했습니다.  그럼에도 불구하고 완벽하지 않아 후속 검사 방법을 도입했습니다.  이미지 시각적 검사 AI와 챗봇 기반 생성형 AI를 활용한 검사를 시도했지만, 만족할 만한 정확도를 얻지 못했습니다.  결국, 텍스트 오버플로우를 더욱 엄격하게 감지하는 프로그램을 직접 개발하여 문제를 해결했습니다. 이 프로그램은 문장 길이와 글꼴 크기를 기반으로 텍스트 오버플로우를 계산합니다.  또한, AI가 복잡한 차트를 생성하여 왜곡된 결과물을 만들 경우 이를 감지하는 메커니즘도 구축했습니다.  검사에서 문제가 감지되면 자료는 폐기되고 다시 생성됩니다.  텍스트 오버플로우 없는 프레젠테이션 자료가 생성되면, 생성형 AI를 이용하여 내레이션 스크립트를 생성하고, 텍스트 음성 변환 AI로 오디오 데이터를 만들어 최종적으로 ffmpeg를 사용하여 영상을 완성합니다.  자동화된 시스템 구축 과정을 상세히 설명하고, 시행착오를 통해 얻은 교훈과 향후 전망을 제시하며 글을 마무리합니다.  저자는 시스템 개발의 성공을 강조하지만, 최근 유사한 기능을 제공하는 Google NotebookLM 등의 등장으로 인해 향후 개인적 시스템 구축의 필요성은 줄어들 것이라고 예측합니다.</description>
    </item>
    
    <item>
      <title>마이크로 가상 지능으로서의 어텐션 메커니즘</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_08_06_micro-vm-intelligence/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_08_06_micro-vm-intelligence/</guid>
      <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
      <description>본 글은 생성형 AI의 핵심 메커니즘인 어텐션 메커니즘을 &apos;마이크로 가상 지능&apos;으로 해석하고, 이를 확장하여 &apos;가상 지능&apos; 및 &apos;명시적 어텐션 메커니즘&apos;이라는 개념을 제시합니다.  기존 생성형 AI는 방대한 정보를 처리하는 데 어려움을 겪는데, 이는 업무별로 정보를 분리하여 AI를 활용하는 방식으로 해결되고 있습니다. 하지만 이러한 방식은 복합적인 작업 시 여러 AI를 조합해야 하는 비효율성을 야기합니다.  저자는 미래의 생성형 AI가 상황에 따라 필요한 지식을 자동으로 선택하는 &apos;가상 지능&apos;을 갖추게 될 것이라고 주장합니다. 이 가상 지능은 하나의 AI 시스템 내에서 여러 전문 분야를 담당하는 가상 지능들을 동시에 작동시키는 것과 같습니다.  저자는 이 가상 지능의 작동 원리를 어텐션 메커니즘과 유사하게 보고, 어텐션 메커니즘을 &apos;마이크로 가상 지능&apos;으로 명명합니다. 어텐션 메커니즘은 자연어 처리 시 특정 단어의 해석에 필요한 단어들에만 집중하여 처리 효율을 높이는 역할을 합니다.  이와 반대로, 가상 지능은 전체 지식 집합에서 필요한 지식을 선택하는 메커니즘으로 작동합니다.  이러한 가상 지능을 구현하는 방법으로 &apos;명시적 어텐션 메커니즘&apos;을 제안합니다.  이는 &quot;작업 A를 실행할 때는 지식 B와 지식 C를 참조하라&quot;와 같이, 작업에 필요한 지식을 명시적으로 지정하는 방식입니다.  이러한 명시적 어텐션 지식은 생성형 AI에 의해 생성 및 업데이트될 수 있으며, 작업 실패 시 추가적인 지식을 포함하도록 수정될 수 있습니다.  결론적으로 저자는 어텐션 메커니즘이 단순한 기술적 메커니즘이 아니라, 상황에 따라 필요한 정보에 집중하는 고도의 지능적 행위의 본질을 담고 있으며, 가상 지능 및 명시적 어텐션 지식과 같은 개념을 통해 지능을 재귀적으로 향상시키는 핵심이라고 주장합니다.</description>
    </item>
    
    <item>
      <title>공간 인식의 차원: AI의 잠재력</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_space-dimension-ai/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_space-dimension-ai/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>이 글은 인간의 3차원 공간 인식 능력을 바탕으로, AI를 이용해 4차원 이상의 고차원 공간을 인식하고 이해하는 가능성과 그 영향에 대해 논의합니다. 저자는 인간이 2차원 시각 정보를 3차원 공간으로 역매핑하는 방식에 착안하여, 컴퓨터 시뮬레이션을 통해 4차원 공간을 학습하면 인간도 4차원 공간 인식 능력을 갖게 될 수 있지만, 그 적용 가능성은 제한적일 것이라고 예측합니다. 반면, AI는 2차원 시각 정보에 얽매이지 않고 4차원 이상의 고차원 공간을 직접적으로 인식하고 처리할 수 있다는 점을 강조합니다.  AI가 고차원 그래프를 이해하고 다차원 데이터 패턴을 분석하는 능력은, 기존 AI의 단순한 다차원 데이터 패턴 매칭을 뛰어넘어 데이터에 대한 깊이 있는 이해를 가능하게 합니다.  고차원 데이터를 저차원으로 매핑하지 않고 고유 차원 그대로 파악하는 AI의 능력은, 과학적 발견에 혁신을 가져올 수 있습니다.  예를 들어, 천문 관측 데이터를 고유 차원에서 파악할 수 있었다면 지동설의 발견이 훨씬 빨라졌을 것이라고 언급하며, 상대성이론이나 양자역학과 같은 이론의 발전 속도도 빨라졌을 것이라고 주장합니다.  즉, 차원 고유 AI는 인간이 아직 발견하지 못한 다양한 이론과 법칙을 발견하여 과학 및 학문의 패러다임을 혁신적으로 가속화할 잠재력을 가지고 있습니다.  하지만 고차원에서 발견된 패러다임은 인간의 이해를 넘어설 수 있으며, 모든 패러다임을 이해하는 것은 불가능할 수도 있습니다.  결론적으로 저자는 고차원 공간 인식 능력을 갖춘 AI가 인간의 이해를 뛰어넘는 수준의 과학적 발전을 이끌 수 있지만, 동시에 인간의 이해를 초월하는 수준의 복잡한 시스템이 등장할 가능성도 제기하며 글을 마무리합니다.</description>
    </item>
    
    <item>
      <title>심포닉 인텔리전스의 시대</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_symphonic-intelligence/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_symphonic-intelligence/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 생성형 AI의 활용이 도구 단계를 넘어 시스템화 단계로 진입하고 있으며, 그 너머에는 &quot;심포닉 인텔리전스&quot;라는 새로운 시대가 도래할 것이라는 주장을 제시합니다. 먼저, 반복 작업에 대한 분석을 통해 생성형 AI를 도구로 사용하는 현황과 한계점을 지적합니다. 반복 작업은 인간의 무의식적인 하위 작업들의 결합으로 이루어지며, 도구의 효율성 향상에도 불구하고 인간의 작업 시간이 병목 현상을 야기하고 베테랑과 신입 간의 기술 격차를 해소하기 어렵다는 점을 강조합니다. 이러한 한계를 극복하기 위해서는 반복 작업을 표준화된 플로우 작업으로 전환하고 시스템화하는 것이 중요하다고 주장합니다. 플로우 작업 전환을 통해 생성형 AI가 특정 작업에 집중하여 효율성과 정확도를 높이고, 지식 공유를 용이하게 하며, AI를 통한 점진적인 작업 전환을 가능하게 합니다. 이러한 시스템화된 플로우 작업은 마치 공장 생산 라인처럼 지적 작업의 자동화를 가능하게 합니다.  다음으로, 기존의 시스템 연동 방식 대신, 단일 생성형 AI가 여러 역할을 전환하며 작업하는 &quot;가상 지능&quot; 개념을 제시합니다. 이는 컴퓨터의 가상 머신과 유사하게, 단일 AI가 여러 역할을 시뮬레이션하는 방식입니다.  여기서 생성형 AI가 여러 역할과 지식을 자유롭게 조합하는 능력을 &quot;지능 오케스트레이션&quot;이라고 명명합니다. 이는 여러 가상 머신을 관리하는 오케스트레이션 기술과 유사하며,  필요에 따라 적절한 역할과 지식을 활용하여 유연하고 효율적으로 작업을 수행하는 능력을 의미합니다.  마지막으로, 지능 오케스트레이션을 통해 여러 작업을 수행하는 생성형 AI의 시스템을 &quot;심포닉 인텔리전스&quot;라고 정의합니다. 마치 오케스트라처럼 각 생성형 AI가 특정 역할을 담당하면서 전체적으로 하나의 지적 작업을 수행하는 것을 의미합니다.  저자는 심포닉 인텔리전스가 인간 지능과 유사하며, 이를 시뮬레이션하는 생성형 AI는 여러 반복 작업을 처리하고, 작업 간의 공통 규칙과 지식 구조를 파악하여,  새로운 작업에 대한 학습 능력을 향상시켜 AGI(Artificial General Intelligence)의 한 형태로 발전할 수 있을 것이라고 전망합니다.  인간은 더 이상 작업을 플로우 프로세스로 전환하거나 노하우를 지식화하는 데 노력을 기울일 필요가 없어지고, 생성형 AI가 자동으로 축적한 지식은 다른 AI와 공유되어 AI의 학습 능력은 인간을 뛰어넘을 것이라고 예측합니다.</description>
    </item>
    
    <item>
      <title>가상 지능의 오케스트레이션</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_virtual-intelligence-orchestration/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_30_virtual-intelligence-orchestration/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 가상 머신 개념을 확장하여 &apos;가상 지능&apos;이라는 개념을 제시하고, 이를 활용한 &apos;지능 오케스트레이션&apos;이라는 새로운 프레임워크를 소개합니다. 가상 머신이 실제 컴퓨터 위에 가상 컴퓨터를 구현하는 것처럼, 가상 지능은 실제 지능(예: 인간 또는 기존 AI) 위에 가상적인 지능을 구현하는 것을 의미합니다.  인간이 여러 역할을 수행하거나 대화형 AI가 다양한 캐릭터를 연기하는 것이 가상 지능의 예시입니다.  기존의 시스템 오케스트레이션이 여러 실제 컴퓨터 또는 AI를 조합하여 작업을 수행하는 방식이라면, 지능 오케스트레이션은 단일 AI 내에서 여러 가상 지능을 동시에 활용하여 작업을 수행하는 방식입니다.  이는 시스템 개발 없이, 프롬프트만으로 여러 가상 지능의 역할과 조합을 유연하게 변경할 수 있다는 장점이 있습니다.  지능 오케스트레이션은 단순히 작업 효율 향상에 그치지 않고, AI의 &apos;숙고&apos; 능력을 향상시키는 데에도 기여합니다.  여러 가상 지능의 관점을 통합함으로써 AI는 더욱 정확하고 다각적인 사고를 할 수 있으며,  스크랩 앤 빌드(scrap-and-build) 방식을 통해 숙고 방식 자체를 개선해나갈 수 있습니다.  이는 &apos;궁극의 숙고&apos;로 이어져, 오류를 최소화하고 새로운 발견과 창의성을 가능하게 합니다.  결론적으로, 가상 지능과 지능 오케스트레이션은 시스템 개발의 부담 없이 AI의 능력을 극대화하고, 인간 수준의 복잡한 지적 작업을 수행하는 데 기여하여,  비즈니스 영역에서 AI의 활용 범위를 획기적으로 확장할 것으로 예상됩니다.  특히, 단일 AI가 여러 가상 지능을 전환하며 숙고에 참여하는 방식은 단기 기억의 한계를 극복하고, 실패 경험을 통해 자기 학습을 가능하게 합니다.</description>
    </item>
    
    <item>
      <title>시뮬레이션 사고와 생명의 기원</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_29_simulation-thinking/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_29_simulation-thinking/</guid>
      <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 글은 누적 상호작용의 결과를 단계적으로 추적하여 결과를 논리적으로 이해하는 사고방식인 ‘시뮬레이션 사고’를 제시하고, 이를 통해 생명의 기원에 대한 새로운 관점을 제시하는 글입니다. 저자는 복리 이자 계산처럼 누적 상호작용의 결과를 예측하지 못하는 우리의 인지적 한계를 지적하며, 시뮬레이션 사고를 통해 이러한 한계를 극복할 수 있다고 주장합니다.  생명의 기원 문제에 시뮬레이션 사고를 적용하여, 단순한 화학물질로부터 복잡한 생명체로의 진화 과정을 단계적으로 설명합니다. 초기 지구의 물과 대기 순환을 통해 화학물질이 반복적으로 반응하고, 약간 더 복잡한 화학물질이 생성되는 과정을 ‘생명 기원의 첫걸음’으로 제시합니다. 이 과정에서 생성된 약간 더 복잡한 화학물질은 자기 유지, 복제, 대사 기능의 초기 형태를 갖추고 있으며, 이는 지구 규모의 순환을 통해 지속적으로 유지된다고 설명합니다.  저자는 이러한 약간 더 복잡한 화학물질의 생성과 유지가 지구 전체에서 반복됨으로써 점진적으로 더욱 복잡한 화학물질과 생명 현상이 나타났다고 주장합니다. 고분자(폴리머)의 역할, 수많은 호수와 연못이 제공하는 다양한 환경, 그리고 태고의 지구를 덮었던 먼지 구름이 촉매 역할과 에너지 공급원으로 작용했을 가능성을 언급하며, 생명 기원의 메커니즘을 더욱 자세히 설명합니다. 이러한 메커니즘은 지구 규모의 순환, 고분자의 형성, 그리고 다양한 환경의 상호작용을 통해 복잡성이 누적되는 과정을 강조합니다.  저자는 ‘먼지 구름 가설’을 제시하며, 태고의 지구 환경이 단량체 생성에 유리한 조건을 제공했을 것이라고 주장합니다. 빈번한 화산 활동과 운석 충돌로 인한 먼지 구름이 자외선을 차단하고, 다양한 원소들을 제공하며, 화학 반응을 촉진하는 역할을 했을 것이라는 설명입니다.  마지막으로 저자는 시뮬레이션 사고가 소프트웨어 개발에 필수적인 기술임을 강조합니다. 소프트웨어 개발 과정에서 자연어 기반의 요구사항 분석과 설계 과정을 통해 시뮬레이션 사고가 활용되고 있으며, 이 과정에서 이중 시뮬레이션 사고(컴퓨터 내부 작동과 고객 요구사항 모두 시뮬레이션)가 필요하다고 주장합니다.  결론적으로, 저자는 시뮬레이션 사고가 생명의 기원과 같은 복잡한 현상을 이해하는 데 필수적이며, 소프트웨어 개발자와 같은 시뮬레이션 사고 능력을 갖춘 사람들이 미래 사회에서 중요한 역할을 할 것이라고 예측합니다.  저자는 자연어를 사용한 ‘자연 수학’이라는 개념을 제시하며, 형식적인 수학적 표현 없이도 시뮬레이션 사고를 통해 복잡한 현상을 이해하고 설명할 수 있음을 강조합니다.</description>
    </item>
    
    <item>
      <title>플로우 작업 전환 및 시스템: 생성형 AI 활용의 본질</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_29_tool-vs-system/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_29_tool-vs-system/</guid>
      <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 생성형 AI를 활용하여 업무 효율성을 극대화하는 방법으로서, 단순히 도구로서의 활용이 아닌, 반복 작업을 플로우 작업으로 전환하고 시스템화하는 것을 강조합니다. 저자는 작업 유형을 반복 작업과 플로우 작업으로 구분하고, 플로우 작업에서는 작업 흐름을 안내하는 시스템이 생산성과 품질 향상에 필수적이라고 주장합니다. 산업 혁명과 IT 혁명을 예시로 들어 반복 작업의 플로우 작업 전환과 시스템화가 생산성 향상에 기여했음을 설명합니다. 생성형 AI를 도구로만 사용하는 것은 효율성 향상에 한계가 있다고 지적하며, 생성형 AI의 강점을 활용하여 반복 작업을 플로우 작업으로 전환하고 시스템화해야 진정한 가치를 실현할 수 있다고 주장합니다.  인간과 달리 생성형 AI는 이전 단계를 잊어버리지 않고 새로운 절차를 즉시 적용할 수 있으므로, 플로우 작업 전환과 시스템화에 유리하다고 분석합니다. 사내 규정 문의 응대 업무를 예시로 들어, 생성형 AI를 단순히 도구로 사용하는 것과 플로우 작업으로 전환하여 시스템화하는 것을 비교합니다.  단순 도구 활용의 경우 효율성 향상이 제한적이지만, 플로우 작업 전환 및 시스템화를 통해 문의 접수, 규정 검토, 답변 생성, FAQ 업데이트 등의 단계를 명확히 하고, IT 시스템과 생성형 AI를 활용하여 자동화 및 최적화를 가능하게 합니다.  이 과정에서 발생하는 생성형 AI의 오류는 지침서 업데이트를 통해 지속적으로 개선하며, 이 업데이트 과정 자체도 플로우 작업으로 전환하여 효율성을 높일 수 있다고 설명합니다.  마지막으로 생성형 AI의 비즈니스 적용에 대한 흔한 오해 두 가지, 즉 생성형 AI를 단순한 도구로만 보는 시각과 생성형 AI가 반복 작업만 수행할 수 있다는 시각을 지적하며, 플로우 작업 전환과 시스템화를 통해 생성형 AI의 진정한 잠재력을 활용해야 함을 강조합니다.  결론적으로 저자는 생성형 AI를 효과적으로 활용하려면 사고방식의 전환, 즉 반복 작업을 객관적으로 분석하여 플로우 작업으로 전환하고 시스템화하는 것이 중요하다고 주장하며, 이를 통해 지속적인 개선과 업무 효율성 향상을 이룰 수 있음을 제시합니다.</description>
    </item>
    
    <item>
      <title>리퀴드웨어 시대의 전방위 엔지니어</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_28_liquidware-allrounder/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_28_liquidware-allrounder/</guid>
      <pubDate>Mon, 28 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 생성형 AI의 발전으로 인해 소프트웨어 개발 방식이 변화하고 있으며, 이러한 변화에 따라 ‘리퀴드웨어’와 ‘전방위 엔지니어’의 개념이 중요해지고 있음을 논의합니다.  먼저, 생성형 AI가 프로그램 생성에 능숙해짐에 따라, 코드 작성 자체는 AI가 담당하고 인간은 지시와 검증에 집중하는 소프트웨어 개발 방식이 가능해졌습니다.  이를 통해 소프트웨어 개발의 효율성이 높아지고, 기존에는 상상하기 어려웠던 수준의 맞춤형 소프트웨어 개발이 가능해지고 있습니다.  기사에서는 이러한 변화를 ‘리퀴드웨어(Liquidware)’ 시대라고 명명합니다. 리퀴드웨어는 사용자가 소프트웨어의 기능과 인터페이스를 자유롭게 변경할 수 있는, 하드웨어와 기본 소프트웨어를 넘어선 유동적인 소프트웨어를 의미합니다.  예를 들어, 쇼핑몰 웹사이트의 디자인을 사용자 개인의 취향에 맞게 변경하는 것처럼, 사용자 스스로 소프트웨어를 커스터마이징할 수 있는 시대가 도래할 것이라고 주장합니다. 이러한 리퀴드웨어 시대에는 단순히 특정 프로그래밍 언어나 플랫폼에 대한 전문 지식만으로는 소프트웨어 개발에 참여하기 어렵게 됩니다. 대신, 클라우드 인프라, 네트워크, 보안, 플랫폼, 개발 프레임워크, 데이터베이스 등 다양한 시스템에 대한 전반적인 이해를 갖춘 ‘전방위 엔지니어’가 필요해집니다. 전방위 엔지니어는 생성형 AI를 적극적으로 활용하여 소프트웨어 개발 과정을 효율적으로 관리하고, 다양한 시스템을 통합하는 복합적인 시스템 설계 및 구축에 중추적인 역할을 담당합니다. 기사에서는 전자상거래 웹 애플리케이션을 예시로 들어, 사용자 커뮤니티 플랫폼 통합, 옴니 디바이스 및 플랫폼 호환성, 비즈니스 시스템 개선, 그리고 리퀴드웨어 호환성을 갖춘 복합적인 소프트웨어 개발에 전방위 엔지니어가 필수적임을 보여줍니다. 이러한 전방위 소프트웨어 개발은 기존의 개발 방식으로는 어려웠던 수준의 복잡성과 요구사항을 충족시키며, 생성형 AI의 활용을 통해 가능해진 새로운 개발 패러다임을 제시합니다.  결론적으로, 기사는 생성형 AI 기반의 자동 프로그래밍과 리퀴드웨어 시대의 도래를 현실적인 문제로 인식하고, IT 엔지니어들에게 풀스택 엔지니어링을 넘어 전방위 엔지니어링으로의 전환을 촉구합니다.  이는 단순히 IT 시스템뿐 아니라, 고객, 내부 직원, 그리고 AI를 연결하는 전방위적인 비즈니스 엔지니어링 및 커뮤니티 엔지니어링, 나아가 사회 전체의 개선을 위한 전방위 사회 공학까지 그 영역을 확장할 것으로 예측하며 마무리됩니다.</description>
    </item>
    
    <item>
      <title>사고의 숙명: AI와 인간</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_12_fate-of-thinking/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_12_fate-of-thinking/</guid>
      <pubDate>Sat, 12 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 글은 인공지능(AI) 시대의 소프트웨어 개발 패러다임 변화와 인간의 사고에 미치는 영향을 분석하고, 새로운 사고방식인 &apos;개별 최적화&apos;와 &apos;주관적 철학&apos;을 제시합니다. 저자는 AI가 지적 노동을 대체함에 따라 인간은 단순한 지적 작업에서 해방되지만, 동시에 더욱 심오하고 개별적인 사고를 요구받게 될 것이라고 주장합니다.  기존의 객체 지향 프로그래밍을 넘어서는 새로운 패러다임으로 &apos;프로세스 지향&apos;을 제안하는데, 이는 소프트웨어의 기본 단위를 프로세스로 보고, 이벤트나 조건에 따라 시작, 처리, 종료되는 일련의 단계로 소프트웨어를 구성하는 방식입니다. 이러한 프로세스 지향 접근 방식은 각 프로세스에 필요한 모든 처리와 데이터를 포함하는 독립적인 모듈로 구성되어, AI 지원 하에 중복된 코드 존재에도 문제가 없다는 주장을 펼칩니다.  저자는 이러한 프로세스 지향적 사고방식을 사회 전반에 적용하여 &apos;개별 최적화 사회&apos;라는 개념을 도출합니다.  AI에 의한 고도의 효율성 달성으로,  기존의 표준화된 가치와 규칙보다 개별 상황에 맞는 유연한 판단이 더욱 중요해질 것이라는 것입니다. 법률의 예외 조항이나 재판 과정에서 보이는 개별적인 상황 고려가 그 예시입니다.  이러한 개별 최적화 사회에서 중요해지는 것이 바로 &apos;주관적 철학&apos;입니다.  이는 각 상황에 대해 깊이 숙고하고 개별적인 최적의 판단을 내리는 것을 강조하는 윤리적 관점입니다.  즉, 표준화된 판단이나 숙고 없는 임의적인 결정 대신, 개별 사건의 고유한 특성을 고려하여 책임감 있는 판단을 내리는 것을 중시합니다.  결과적으로, AI 시대의 인간에게는 개별 사안에 맞는 프레임워크를 설계하고 깊이 있는 사고를 통해 개별 최적화된 결정을 내리는 능력이 중요해집니다.  AI가 지적 노동의 일부를 대체하더라도,  &apos;나&apos;에게 책임이 있는 결정에 대해서는 AI의 도움을 받더라도 최종 결정은 인간 스스로 내려야 하며,  &apos;생각할 시간이 없었다&apos;는 변명은 통하지 않는 고도로 효율화된 사회에서 인간은 &apos;사고의 숙명&apos;에서 벗어날 수 없다는 결론을 내립니다.  즉, AI 시대에도 인간은 더욱 심도 있고 책임감 있는 사고를 통해 개별 최적화를 추구하는 삶을 살아가게 될 것이라는 예측입니다.</description>
    </item>
    
    <item>
      <title>업무 프로세스 지향 소프트웨어로의 초대</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_07_11_business-process-oriented/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_07_11_business-process-oriented/</guid>
      <pubDate>Fri, 11 Jul 2025 00:00:00 GMT</pubDate>
      <description>본 기사는 기존의 객체 지향 소프트웨어 패러다임을 넘어선 새로운 소프트웨어 접근 방식인 &apos;업무 프로세스 지향 소프트웨어&apos;를 제안합니다.  기존 소프트웨어 개발은 데이터와 처리를 분리하여 설계하지만, 업무 프로세스 지향 소프트웨어는 업무 프로세스를 기본 단위로, 업무 매뉴얼, 입력 정보, 각 태스크의 담당자 정보를 하나의 파일 안에 통합합니다. 이 파일 자체가 소프트웨어로 기능하는데, 각 담당자가 파일을 순차적으로 처리하며 업무 프로세스를 수행하는 방식입니다.  이는 프로그램이나 시스템 개발 없이도 업무 프로세스를 구현하고 변경할 수 있다는 장점이 있습니다. 기존 방식처럼 프로그램 개발 및 유지보수에 드는 시간과 비용을 절감하고, 업무 매뉴얼 변경 시 프로그램 수정이 필요 없어 효율성을 높입니다.  본 기사에서는 이 파일을 &apos;인간이 실행하는 소프트웨어&apos;로 정의하고,  업무 프로세스 지향 소프트웨어의 실행 주체는 인간 또는 인공지능(AI)이 될 수 있다고 주장합니다. AI의 지원을 통해 업무 프로세스의 자동화 및 인간 지원이 가능해지며,  인공지능은 업무 매뉴얼을 이해하고,  필요한 부분에 대해 인간에게 질문하거나,  인간이 작업하기 쉬운 형태의 임시 파일(예: 스프레드시트)을 생성하여 정보 입력을 지원합니다.  AI 친화적인 파일 형식(예: 마크다운)을 사용하는 것이 권장되며,  기본적인 내용 기재 규칙을 정해두면 AI 지원의 효율성을 더욱 높일 수 있습니다. 이러한 방식을 통해 업무 프로세스와 관련된 질문과 개선 요청이 하나의 연락 창구로 집중되고,  업무 프로세스 관련 지식이 축적되어 지속적인 업무 프로세스 개선이 가능해집니다.  결과적으로, 업무 프로세스 지향 소프트웨어와 AI 지원을 통해 조직은 &apos;고속 학습 조직&apos;으로 발전하여, 전통적인 조직보다 훨씬 더 효율적인 조직 활동을 수행할 수 있게 됩니다.  인간은 AI의 지원을 통해 사용자 친화적인 인터페이스를 통해 최소한의 작업만 수행하면 되므로, 방대한 양의 정보 학습이나 잦은 업무 프로세스 변경에 대한 적응 부담을 크게 줄일 수 있습니다.  핵심적으로, 본 기사는 &apos;업무 프로세스 지향 소프트웨어&apos;라는 새로운 개념을 제시하고,  이를 통해 업무 효율성을 극대화하고 지속적인 학습과 개선을 가능하게 하는 &apos;고속 학습 조직&apos;을 구축할 수 있다고 주장합니다.</description>
    </item>
    
    <item>
      <title>프레임워크 설계라는 지적 능력</title>
      <link>https://katoshi-mfacet.github.io/ko/articles/2025_06_29_framework-design-ability/</link>
      <guid>https://katoshi-mfacet.github.io/ko/articles/2025_06_29_framework-design-ability/</guid>
      <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
      <description>본 글은 학문과 개발의 지적 활동 차이를 논하며, 학문 내에서도 중요한 위치를 차지하는 &apos;프레임워크 설계&apos;라는 지적 활동에 초점을 맞추고 있습니다.  학문은 주로 관찰을 통한 사실 발견에 기반하지만, 프레임워크 설계는 설계를 통한 발명, 즉 새로운 개념적 틀을 만드는 활동입니다. 천동설과 지동설, 뉴턴 역학, 상대성 이론, 양자 역학 등 과학적 패러다임의 변화를 프레임워크 설계의 예시로 제시하며, 이는 단순한 패러다임 전환이 아닌, &apos;패러다임 발명&apos; 또는 &apos;패러다임 혁신&apos;으로 보는 것이 더 적절하다고 주장합니다.  이러한 프레임워크 설계는 관찰을 통한 발견과는 다른 지적 능력과 스킬셋을 필요로 하며, 대부분의 학자들은 관찰에 능숙하지만 프레임워크 설계에는 숙련되지 않았을 가능성이 높다고 언급합니다.  반면, 개발 분야, 특히 소프트웨어 엔지니어링은 설계를 통한 발명을 일상적으로 수행하는 분야로, 소프트웨어 엔지니어들은 학문적 프레임워크 설계에 필요한 스킬셋을 잠재적으로 보유하고 있다고 주장합니다.  하지만 단순히 설계 능력만으로는 충분하지 않으며, 추상적 개념 설계에 대한 뛰어난 능력과 새로운 디자인 모델을 습관적으로 구상하는 능력이 필요하다고 강조합니다.  결론적으로, 본 글은 학문과 개발의 지적 활동 차이를 명확히 하고, 프레임워크 설계라는 독특한 지적 활동의 중요성과, 소프트웨어 엔지니어들이 이 분야에 기여할 수 있는 잠재력을 강조하는 내용입니다.  특히, 저자는 기존의 &apos;패러다임 전환&apos;이라는 용어 대신 &apos;패러다임 발명&apos;이나 &apos;패러다임 혁신&apos;이라는 용어를 사용하는 것이 더 적절하다고 제안하며, 이는 단순한 기존 틀의 변경이 아닌, 완전히 새로운 틀의 창조라는 의미를 강조합니다. 또한, 학문 분야에서의 프레임워크 설계는 추상적인 개념을 메타 레벨에서 재구성하는 고도의 지적 활동이라는 점을 강조하며,  소프트웨어 엔지니어들이 이러한 능력을 잠재적으로 가지고 있지만,  추상적인 개념 설계에 대한 뛰어난 능력과 끊임없는 새로운 디자인 모델에 대한 고민이 필요함을 시사합니다.  즉, 단순한 기술적 능력을 넘어, 창의적이고 추상적인 사고 능력이 프레임워크 설계에 필수적이라는 것을 보여주는 글입니다.</description>
    </item>
    
  </channel>
</rss>