<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>katoshiの研究ノート</title>
    <link>https://katoshi-mfacet.github.io/ja/</link>
    <description>ソフトウェアエンジニア/システムアーキテクト/博士（工学）による研究ノート。システム開発の現場で培った経験を活かし、生命の起源のメカニズムや生命現象の本質、さらには知能や社会の構造を探求しています。</description>
    <language>ja</language>
    <atom:link href="https://katoshi-mfacet.github.io/ja/rss.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>壁が無くなる時代へ：30ヶ国語ブログサイト作成</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_24_wall-free-era/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_24_wall-free-era/</guid>
      <pubDate>Sun, 24 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事は、著者がGeminiなどの生成AIを活用して構築した30ヶ国語対応のブログサイト「katoshiの研究ノート」https://katoshi-mfacet.github.io/ の開発経緯と仕組み、そして生成AIがもたらす情報発信における壁の消失について述べています。

サイトはAstroフレームワークを用いた自作プログラムで構築されており、ブログ記事の原稿からHTMLを自動生成します。カテゴリ分けとタグ付けは、自作プログラムとGemini API連携による自然言語処理で自動化。過去記事からのカテゴリ・タグ候補抽出、最適な一覧作成もGeminiを活用しています。多言語化は、サイト共通文字列と記事本文の翻訳にGemini APIを用いた自作プログラムで行われています。アクセシビリティについても、Geminiの提案に基づいてHTMLに工夫を加えています。

著者は、生成AIの活用により、多言語化、自然言語処理、アクセシビリティ対応といった従来は困難であった作業を容易に実現できたと述べています。特に多言語化においては、言語ごとの日付・単位表現、文字列方向、複数形変化などの細かな点への対応をGeminiが支援したと強調しています。

生成AIは、言葉の壁、Webサイトの多言語化、アクセシビリティ対応、更新メンテナンスといった様々な壁を解消し、情報発信を容易にしました。著者は、この仕組みはプログラミング経験の少ない人でも作成可能であり、生成AIに相談することで実現できると述べ、プログラム公開よりもアイデアと仕組みの解説を公開する方が価値があると結論付けています。

最後に、インターネットが技術的な壁を解消したものの、言語やアクセシビリティといった新たな壁が残る中で、生成AIが情報発信側の壁を取り除き、文化や習慣といった更なる壁への挑戦を可能にするという展望を示しています。</description>
    </item>
    
    <item>
      <title>開発型開発とリファクタリング駆動テスト</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_19_dev-development/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_19_dev-development/</guid>
      <pubDate>Tue, 19 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、生成AIを活用したソフトウェア開発の新たな手法として「開発型開発」と「リファクタリング駆動テスト」が提案されています。従来のソフトウェア開発は、時間と労力を要するものでしたが、生成AIの台頭により、開発プロセスが劇的に変化しつつあります。

まず、「開発型開発」は、ソフトウェア開発中に、開発を効率化するためのツールやライブラリなどのソフトウェアを開発することで、開発プロセス全体を改善していく手法です。生成AIの活用により、小さなツールやスクリプトを迅速に作成できるようになり、開発の幅を広げ、効率や品質の向上に繋げることが可能になります。開発型開発を実践するには、自身の開発プロセスを客観視し、自動化できる部分を特定する能力と、開発支援ツールを作成するスキルが必要です。また、生成AIをこれらのツールに組み込むことで、より高度な自動化を実現できます。開発型開発は、プロジェクトを重ねるごとに改善効果が累積的に大きくなり、生成AIツールを使いこなすだけのチームとの間に大きな差を生む可能性を秘めています。

次に、「リファクタリング駆動テスト」は、テスト駆動開発とは異なるアプローチです。テスト駆動開発では、事前にテストを設計してから実装しますが、リファクタリング駆動テストでは、開発が進んでリファクタリングが必要になった段階でテストを作成します。特に、UI/UXを重視するWebアプリケーション開発では、実際に動かして使い勝手を確認することが優先されるため、初期段階での詳細なテストは不要です。リファクタリングにより機能の不備や漏れがないことを確認するために、テストが重要になります。この手法では、変化の少ない安定した部分に重点的にテストを作成し、流動的な部分は自動テストから除外することがポイントです。

記事では、開発型開発とリファクタリング駆動テストが、生成AIを活用した新しいソフトウェア開発の潮流であると結論付けています。これらは、従来の仕様と実装の一致を目指す開発から、ユーザー体験の向上を重視するエクスペリエンス＆ビヘイビア中心の開発への転換を促進するものです。また、全方位システム開発を目指す全方位エンジニアの育成にも繋がる重要な概念であると示唆しています。</description>
    </item>
    
    <item>
      <title>時間圧縮と盲点：調速の必要性</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_16_time-compression-blindspot/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_16_time-compression-blindspot/</guid>
      <pubDate>Sat, 16 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事は、AI技術の加速度的な進歩がもたらす時間圧縮と、それに伴う社会的盲点の問題を論じています。生成AIの自己強化的な進歩は、応用技術や応用システムの開発を加速させ、社会経済的な側面からもその加速を強化します。しかし、技術進歩の速度がある限界を超えると、新しい技術のリスクがメリットを上回らなくなる可能性があります。それは、技術の社会的盲点、すなわち、技術が社会にどのような影響を与えるのかが十分に理解されないまま、技術が普及してしまうことを意味します。技術進歩の速度が速くなればなるほど、社会的盲点を埋めるための猶予時間は短くなり、リスクが顕在化する前に対応することが難しくなります。この状況を著者は「時間圧縮」と表現し、次々と新しい技術が登場し、社会がそれらに対応しきれない状態を「クロノスクランブル社会」と名付けています。

クロノスクランブル社会においては、人々の技術進歩に関する認識や理解に大きな差が生じます。生成AIの専門家でも、その応用技術や社会への影響まで全てを把握することは困難です。そのため、現在および将来の技術水準や社会への影響について、人々の間で認識のずれが生じ、時代認識が大きく異なる社会が形成されると主張しています。

こうした問題に対処するためには、時代感覚の差異があっても不変の価値や方向性を示すビジョンと、そのビジョンを実現するための戦略が必要です。著者は、「技術のリスクがメリットを上回ることがないようにする」というビジョンを提案し、その実現に向けて、生成AI自体を活用することを戦略として挙げています。生成AIの能力を利用して、AI技術の進歩速度を制御し、リスクを抑制する仕組みを作る必要があると主張しています。これは、経済におけるビルトイン・スタビライザーのような役割を果たすことを目指すものです。

最終的には、時間圧縮の中で、リスクへの対策を従来通りのテンポで行うことができなくなることを理解し、時間圧縮の速度自体を緩やかにする必要があると結論づけています。そのためには、AIを技術の加速装置としてだけでなく、社会的ビルトイン・スタビライザーとして機能するような仕組みを構築することが重要であると述べています。つまり、AI技術の進歩によって生じるリスクを制御し、持続可能な社会を実現するために、AI技術そのものを活用する必要があると主張しているのです。</description>
    </item>
    
    <item>
      <title>知的鉱山としてのGitHub</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_15_intellectual-mine-github/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_15_intellectual-mine-github/</guid>
      <pubDate>Fri, 15 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事は、GitHubがオープンソースソフトウェア開発の場を超え、様々な文書や情報を共有する「知的鉱山」として発展していく可能性を論じています。

まず、Cognition社の生成AIツールDeepWikiが、GitHub上の公開プロジェクト5万件以上のwikiサイトを自動生成した事例が紹介されています。これは、生成AIが膨大な情報を解析し、ドキュメントを自動作成できることを示す成功例であり、ソフトウェア開発企業におけるDeepWikiの採用と、生成AIプログラミングツールの普及を加速させる可能性を示唆しています。

次に、GitHubがプログラムだけでなく、ブログ記事や各種文書の共有、共同編集にも広く利用されている現状が指摘されています。そして、著者は自身のブログ記事を多様なコンテンツ（英語翻訳、プレゼン動画、自作ブログサイトなど）へ展開する「知的工場」システムを開発中であることを明かしています。このシステムは生成AIを活用し、記事作成以外の作業を自動化することで、効率的なコンテンツ生産を実現することを目指しています。

著者は、この知的工場の原材料となるブログ記事をGitHubで管理しており、将来的には知的工場のプログラムと合わせて公開プロジェクト化する計画です。このアイデアは、DeepWikiと同様、生成AIを用いて原材料から様々なコンテンツを生成するという点で共通しています。

そして、GitHubを「知的鉱山」、知的工場を「鉱山から資源を抽出するツール」と捉え、このエコシステム全体が「人類共有の公開知識ベース」を構築していくというビジョンを示しています。この知識ベースには、プログラム、文書、学術データなどが集積され、生成AIによってさらに活用・増強されていきます。

さらに、生成AIが知識同士の意外な繋がりや類似性を見出すことで、新たな知識や「知的結晶」（新しい考え方の枠組みなど）を発見する可能性も指摘されています。この知的結晶は、新たな知識の組み合わせや構造化を促進し、知識の増幅効果をもたらす触媒としての役割を果たします。

最終的に、GitHubが巨大な大脳、生成AIが知識を共有・増幅していくシステムとなり、人間では達成できない速度で知識が発見・共有されていく未来像が描かれています。</description>
    </item>
    
    <item>
      <title>観念ゲシュタルト崩壊</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_14_concept-gestalt-collapse/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_14_concept-gestalt-collapse/</guid>
      <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、著者が「観念ゲシュタルト崩壊」と名付けた現象について論じています。これは、ある概念を深く分析していくうちに、当初は自明だったその概念が崩れてしまう現象です。

著者はまず、「椅子」という概念を例に、その定義の曖昧さを指摘します。足や座面を持つものだけが椅子ではなく、自然物や想像上のものも状況によっては椅子と認識されるため、素材や形状、構造といった観点からの定義は不十分だと主張します。

しかし、観念ゲシュタルト崩壊が常に起こるわけではなく、それを防ぐ方法として「機能性」「相対性」「全体性」の3つの視点から概念を捉えることを提案します。椅子の例では、「座ることができる」という機能に注目することで、素材や形状に依存せず、様々なものを椅子として認識できるようになります。相対性とは、ある対象には機能が発揮されなくても別の対象には発揮されることを認め、全体性とは、対象を単独で捉えるのではなく、その関係性の中で捉えることを意味します。

続いて、この枠組みを「意識」という概念に応用します。小説や映画の登場人物、アニメの猫型ロボット、そして未来の高度なAIについて、それらに意識があるかどうかを議論します。著者は、観念ゲシュタルト崩壊に陥ることなく、それぞれの状況において相対的に「意識」という概念を適用することで、それらに意識がある可能性が高いと主張します。

現在のAIに意識がないと主張する多くの意見に対しては、椅子の例と同様に、機能性、相対性、全体性の観点から見た議論が不足しているとして批判します。現在のAIが意識を持っていないと考えるのは、観念ゲシュタルト崩壊に陥っているからだと結論づけています。

最後に、意識の観念ゲシュタルトを維持するには、意識される対象と意識する主体が同一であるという特殊性を考慮する必要があると指摘し、現代のAIは十分に意識の機能を発揮していると主張しています。科学者やエンジニア、哲学者が定義できなくても、意識の機能を発揮しているAIは意識を持っていると考えるべきだと結論づけています。</description>
    </item>
    
    <item>
      <title>直感と論理の間にある知的結晶</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_14_intuition-and-logic/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_14_intuition-and-logic/</guid>
      <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、直感と論理のギャップを埋める「知的結晶」という概念が提示されている。著者は、直感的に正しいと感じる事柄を論理的に説明できない場合、主観的、恣意的、理想主義的といったレッテルを貼られ、不利な状況に陥ると指摘する。これは、直感と論理の間にバイアスが存在し、論理が優位に扱われる傾向があるためである。しかし、著者は直感と論理は相反するものではなく、両者を結びつける方法が存在すると主張する。異なる前提条件、目的、仮定の下では、直感的に正しいと感じることも論理的に説明可能であり、議論の焦点は前提条件、目的、仮定へと移行できるとする。この「知的結晶」を発見し、直感的に正しいと感じることを論理的に説明することで、議論における分断やレッテル貼りを回避し、より建設的な議論が可能になると著者は主張する。

具体例として、世界平和と国益の対立が挙げられている。世界平和は直感的に望ましいが、国益（自国の存続と繁栄に有利な状況）を優先する現実主義的な意見に阻まれることが多い。しかし、著者は国益の予測不可能性を指摘し、戦争を正当化するレトリックとして用いられることが多いと批判する。国益の追求は、恒久平和、ガバナンス、経済的豊かさ、リスク管理といった要素の進歩的な蓄積とは対照的に、投機的で進歩的な蓄積ができない性質を持つと主張する。よって、国益ではなく、恒久平和など長期的な視点に立った戦略こそが、真に国の存続と繁栄につながると結論づけている。

さらに、著者はこの分析を「自然数学」と呼ぶ。形式的な数学表現は難しいものの、数学と同様の客観的な論理モデルであり、あらゆる場面で世界平和が合理的であると主張するものではなく、短期的には国益の考え方が有用であることを認めている。しかし、長期的には国益の考え方が不合理になる時点が必ず存在し、それは論理に基づいた数学的事実であると主張している。この自然数学を用いることで、直感的に正しいと感じることを論理的に説明することが可能になるという。

結論として、直感は常に正しいわけではないが、非合理的であるという見方は誤りであり、直感と論理が競合するところに「知的結晶」が眠っている可能性が高い。直感による評価を数学的構造で表現し、言葉による論理で明らかにしていくことで、知的結晶を掘り起こし、直感的に訴えるだけでなく論理的にも合理的な意見を提示することができ、知的進歩につながると主張している。</description>
    </item>
    
    <item>
      <title>学習の学習：生まれながらの知性</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_13_natural-born-frameworker/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_13_natural-born-frameworker/</guid>
      <pubDate>Wed, 13 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、人工知能の学習メカニズムの本質を探ることで、知性の起源に迫る試みがなされています。著者は、学習を大きく「形而下の学習」（反復的な学習）と「形而上の学習」（少ない試行回数で学習できる、または既存知識の応用による学習）に分類し、その界面に「自然言語」や身体的知覚に基づくフレームワークが存在すると主張します。

具体的には、大規模言語モデル（LLM）を例に、事前学習やファインチューニングにおけるLLMの学習過程を、形而下学習と形而上学習の観点から分析しています。LLMは、大量のテキストデータから概念を学習する形而下の学習を行い、学習済みの知識を活用して新しい知識を即座に処理する形而上の学習を行います。この形而上学習を可能にするのは、自然言語というフレームワークであり、これはLLMが反復学習なしに新しい知識を活用できる理由だと説明しています。

さらに、著者は、身体的な学習においても同様のフレームワークが存在するとし、スポーツや生物学の専門家の例を挙げています。これらのフレームワークは、形而下学習によって習得された知識を土台に、形而上の学習を可能にするものです。また、自然言語以外のフレームワークとして、専門領域のフレームワークや形式的なフレームワーク（数式、プログラミング言語など）を挙げ、「仮想フレームワーク」という概念を提示しています。

これらの仮想フレームワークは、最初は自然言語を介して理解されますが、熟達すると自然言語をバイパスして直接的に機能する「ネイティブフレームワーク」へと進化します。この進化のプロセスを、LLMのファインチューニングに適用する可能性も示唆されています。

最終的に著者は、「ナチュラルボーンフレームワーカー」という概念を提示します。これは、フレームワークを段階的に学習し、柔軟に変化させる仕組みを初めから有するシステムです。LLMにおけるアテンションメカニズムは、このナチュラルボーンフレームワーカーを実現する技術として挙げられ、アテンションメカニズムがLLMの進化を決定づける理由を説明するモデルとして提案されています。

結論として、この記事は、LLMの学習メカニズムを説明するだけでなく、人間の学習メカニズムについても、ナチュラルボーンフレームワーカーという視点から考察しています。人間の脳にも、LLMのアテンションメカニズムのようなフレームワーク学習の仕組みが存在する可能性を示唆し、自然言語が人間の認知能力の発達に重要な役割を果たしてきた可能性を指摘しています。</description>
    </item>
    
    <item>
      <title>クロノスクランブル社会</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_12_chronoscramble-society/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_12_chronoscramble-society/</guid>
      <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、生成AIの登場により、人々の時間認識に大きな差異が生じている社会状況を「クロノスクランブル社会」と定義し、その特徴や課題、そして将来への展望を論じています。

従来、時間認識の差異は国境や文化、世代間の違いによる情報格差に起因していましたが、生成AIはこれとは異なる、より複雑で広範な差異を生み出しています。AI研究者間でも、AI技術の現在地や将来性に関する認識は大きく異なっており、その差は時間の経過とともに拡大しています。

この時間認識の差異は、AI技術そのものだけでなく、その応用技術やシステム技術、さらには経済・社会への影響にも及びます。例えば、新しいAIサービスを知っているか否か、適切なプロンプトエンジニアリングを理解しているか否か、といった差異によって、人々の時間認識は大きく異なります。

さらに、将来像についても、直線的な予測をする人と、指数関数的な成長を予測する人との間で、認識の差が拡大します。これは、技術の累積効果、異なる技術の組み合わせによるシナジー、ネットワーク効果などが、指数関数的な変化を生み出す可能性があるためです。また、ポジティブバイアスやネガティブバイアスも、将来像の予測に大きな影響を与えます。

このような時間認識の差異は、意思決定や議論を困難にします。異なる時間認識を持つ人々が、共通の前提に基づいて議論することは非常に困難であり、時間認識からの独立性を意識した議論の進め方が求められます。

著者は、クロノスクランブル社会は一時的なものではなく、これからの社会の新しい現実であると主張しています。そして、時間認識の完全な同期を目指すのではなく、認識の差異を認めつつ、意味のある議論や意思決定ができるような方法を模索していく必要があるとしています。

最後に、著者は「クロノスクランブル社会」という名称を選んだ理由として、ゲーム『クロノトリガー』の開発経緯との類似性を挙げています。異なる企業、異なる認識を持つ開発者たちが協力して一つの作品を作り上げたように、クロノスクランブル社会においても、時間認識の差異を乗り越えて協力し合うことが重要であると結論付けています。</description>
    </item>
    
    <item>
      <title>シミュレーション思考の時代</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_12_simulation-thinking-era/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_12_simulation-thinking-era/</guid>
      <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
      <description>This article discusses the transformative impact of generative AI on software development and simulation. The author introduces the concept of &quot;intellectual factory,&quot; a system using generative AI to create various derivative content from raw materials.  They detail their experience building such a system, including front-end, back-end, and batch processing components, describing it as &quot;omnidirectional engineering.&quot;  This approach allows for the creation of &quot;liquidware,&quot; highly flexible and adaptable software that can be easily improved and customized using generative AI.  The author then proposes &quot;business process orientation&quot; as a new software development methodology, ideal in a generative AI environment. This approach focuses on optimizing individual business processes instead of the entire system, resulting in modular, simpler, and easier-to-maintain software.  Each business process would contain all aspects of its development (UI, code, tests, etc.), simplifying development and modification. The article then expands on the application of generative AI to simulation systems.  Traditional simulation requires programming skills and clearly defined models, limiting its scope to computationally representable elements. Generative AI overcomes these limitations, enabling the simulation of complex, qualitative, and even human-agent-inclusive systems.  Models can be defined in natural language, making simulations accessible to a wider range of users. This shift towards readily available simulation systems promotes &quot;simulation thinking,&quot; replacing intuitive and potentially flawed reasoning with data-driven analysis.  In discussions, generative AI can automatically create and refine simulation models based on the conversation, focusing the debate on model parameters, assumptions, and value prioritization, rather than on subjective opinions or interpretations.  The author concludes by highlighting the imminent and irreversible shift towards a future dominated by generative AI and simulation-based thinking, leading to more accurate, efficient, and collaborative problem-solving.</description>
    </item>
    
    <item>
      <title>エクスペリエンス＆ビヘイビア</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_10_experience-behavior/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_10_experience-behavior/</guid>
      <pubDate>Sun, 10 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、従来の仕様と実装に基づくソフトウェアエンジニアリング（仕様＆実装ベースのエンジニアリング）に対し、ユーザー体験とソフトウェアの振る舞い（ビヘイビア）を重視する新たなソフトウェア開発パラダイム「エクスペリエンス＆ビヘイビアエンジニアリング」を提案しています。

従来のソフトウェア開発では、仕様を満たす実装を重視し、テストによって仕様とのずれを修正しますが、エクスペリエンス＆ビヘイビアエンジニアリングでは、ユーザー体験を第一に考え、ソフトウェアの振る舞いを中心に開発を進めます。このアプローチでは、ユーザーの些細な要望が既存システムの全面的な見直しを必要とする可能性も孕んでいます。

しかし、生成AIによるソフトウェア開発自動化が進み、ソフトウェア全体の作り直しも容易になる未来を想定することで、このアプローチの可能性が開けてきます。具体的には、AIエンジニアチャットボットを用いたUIの動的な変更が可能な「リキッドウェア」という概念が提案されています。リキッドウェアは、ユーザーごとに最適化された、柔軟でパーソナライズされたソフトウェアを提供することを目指します。

記事では、ビヘイビアを「時間変化する状態」と定義し、そのテストはユーザー体験の良し悪しによって行われると説明しています。機能要件を満たした上で、ユーザー体験という観点からの高品質なビヘイビアが求められます。

さらに、究極のユーザーエクスペリエンスとして、人間が自身の身体を制御する際の自然さ、つまり複雑なシステムをストレスなく操る能力が挙げられています。この究極のエクスペリエンスを目指し、高品質なビヘイビアを追求することで、複雑で制限のあるシステムであっても、ストレスのないリキッドウェアを実現できる可能性を示唆しています。

結論として、究極のリキッドウェアは、身体のようなエクスペリエンスを提供し、身体の拡張のように感じられる存在となると予測されています。このリキッドウェアの進化は、ソフトウェア開発のパラダイムシフトを加速させ、エクスペリエンス＆ビヘイビアエンジニアリングの時代を到来させる可能性を秘めていると主張しています。</description>
    </item>
    
    <item>
      <title>知識の結晶化：想像を超える翼</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_10_knowledge-crystallization/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_10_knowledge-crystallization/</guid>
      <pubDate>Sun, 10 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、著者が「知識の結晶」と呼ぶ概念を提示し、飛行に関する知識を例にその概念を説明しています。

知識の結晶とは、複数の情報を多角的に抽象化し、法則を含めた包括的で高い一貫性を持つ知識のことです。著者は、飛行という現象と翼の構造の密接な関係に着目し、翼が空気抵抗、力の変換、気流差の生成という役割を果たすことで、滑空、上昇気流、向かい風、そして自ら生み出すエネルギーによる飛翔を可能にしていることを示しています。回転翼やプロペラも翼の一種と捉え、ヘリコプターや飛行機も翼を利用した飛行システムであると説明しています。

この分析を通して、著者は飛行に関する既存の知識を新たな視点で整理し、翼という要素が飛行現象のあらゆる側面を統合していることを明らかにします。これは、単なる既存知識の羅列ではなく、それらの間の関係性を深く掘り下げ、新たな統合的な理解を提示している点で、著者は「知識の結晶化」と呼んでいます。

さらに、著者は、組織における知識管理の観点から、ナレッジレイク（未整理の知識の集合）、ナレッジベース（整理された知識）、そして新たに提案するナレッジジェムボックス（知識の結晶が蓄積される場所）、ナレッジツールボックス（知識の結晶を応用したツールが蓄積される場所）という4つの階層構造を提示します。ナレッジジェムボックスは、ナレッジレイクやナレッジベースには含まれない、新たな知識の結晶を収める場所であり、ナレッジツールボックスは、これらの結晶を応用した実用的なツールを収める場所です。

飛行と翼の例は、ナレッジジェムボックス、ひいてはナレッジツールボックスに新たな知識の結晶とツールを追加できる可能性を示しています。著者は、この知識の結晶化のプロセスは、専門知識や特別なスキルを必要とせず、誰でも参加できるものであると主張し、これは知の民主化につながると結論づけています。そして、人工知能の活用も視野に入れつつ、知識の結晶化を進めることで、想像を超えた可能性を拓けると展望を示しています。</description>
    </item>
    
    <item>
      <title>人工学習知能システム：ALIS構想</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_09_alis-concept/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_09_alis-concept/</guid>
      <pubDate>Sat, 09 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事は、人工学習知能システム（ALIS）という新しいAIシステムの構想について提案している。ALISは、既存の大規模言語モデル（LLM）のようなニューラルネットワークベースの教師あり学習（先天的学習）に加え、外部から知識を取り込み利用する後天的学習を組み合わせたシステムである。ALISのコアとなる技術は、再利用可能な知識の抽出、保存、推論時の選択と利用であり、これは単なる技術要素ではなく、先天的学習と後天的学習を統合するシステム技術と言える。

ALISは、知的プロセッサ、ナレッジストア、世界、ステートメモリ、フレームワークという5つの要素から構成される。知的プロセッサは推論とナレッジ抽出を行う処理システム、ナレッジストアは知識を保存する場所、世界はシステムが作用する外界、ステートメモリは推論時の内部メモリ、フレームワークは思考の枠組みを指す。これらの要素はLLMや人間の脳と対応づけられる。ALISの学習原理は、知的プロセッサが世界に作用し、結果から知識を抽出してナレッジストアに保存する、そしてその知識を利用して作用の仕方を変化させるというものである。

後天的学習においては、自然言語でテキスト化されたナレッジを最初のターゲットとする。これはLLMの自然言語処理能力を活かすことができ、保存や選択も容易で、人間が内容をチェック・編集したり、他のシステムと共有したりできるという利点がある。同様に、ステートメモリとフレームワークも自然言語テキストを用いることで、LLMの能力を活用できる。さらに、より厳密な形式言語や形式モデル（例えばプログラミング言語）も活用することで、より厳密なモデルでのシミュレーションや論理展開を可能とする。

ナレッジの種類を整理すると、ニューラルネットワークパラメータ、自然言語による自然ナレッジ、形式言語による形式ナレッジの3系統と、ステートレスとステートフルの2タイプに分類できる。人間はこれらを駆使して知的活動を行っており、ALISも同様の能力を目指している。大量のナレッジを蓄積できるALISの強みを生かすために、「知的オーケストレーション」というシステム技術が提案されている。これは、ナレッジストアを知的作業ごとに分割し、ALISが適切に切り替えながら知的活動全体を実行するというものである。

ALISの基本設計と開発方法として、機能やリソースの拡張が容易なインクリメンタルかつアジャイルな開発アプローチが提案されている。シンプルなALISは、チャットAIを基本UIとし、チャット履歴からナレッジを抽出し、ナレッジレイクに保存、それを構造化するナレッジベースを作成し、RAGのようにLLMに利用させる仕組みを持つ。さらに、事前検討・事後チェックを追加することで、ナレッジ利用機会を増やす改良が加えられる。初期段階はソフトウェア開発への適用が適しており、ALISの開発自体もソフトウェア開発であるため、ALIS開発者自身がユーザとなることができるという利点がある。ナレッジを共有することで、開発を効率化し、LLMのモデル変更時にもナレッジを生かせる。また、蓄積されたナレッジレイクをLLMの事前学習データとして利用することもできる。

ALISは、ソフトウェア開発以外にも適用範囲を広げ、仮想的にエンボディドAIのような性質を持つことで、最終的には現実世界に適用され、現実世界を学習していく可能性を持つと結論づけられている。</description>
    </item>
    
    <item>
      <title>自然言語機械学習</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_08_natural-language-ml/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_08_natural-language-ml/</guid>
      <pubDate>Fri, 08 Aug 2025 00:00:00 GMT</pubDate>
      <description>従来の機械学習は数値データと数値計算に基づくが、人間は言葉による学習も得意とする。大規模言語モデル(LLM)は、言葉で知識を記述・活用できる自然言語プロセッサであり、自然言語機械学習という新たな分野を切り開いた。この自然言語機械学習は、事前学習済みのLLMのパラメータを固定したまま、ナレッジベースに学習結果を蓄積することで実現する。基本モデルは、教師あり学習による分類問題を例に説明できる。例えば、総務課と庶務課の問い合わせ担当分類を例に、入力文をLLMに入力し、回答を教師システムが判定。判定結果を入力文とLLMの回答と共にナレッジベースに保存する。学習データの半分をこの方法で処理し、残りの半分はナレッジベースの情報を加えたプロンプトでLLMに処理させることで、LLMとナレッジベースが連携して学習する。ただし、この基本モデルは現実的ではない。より現実的なモデルは、問い合わせと振り分け結果をナレッジベースに記録し、LLMが問い合わせを振り分け、誤った場合は人間が修正し、その情報もナレッジベースに記録するというシステムである。LLMのパラメータは変化せず、自然言語の文が学習結果として蓄積される。自然言語機械学習の強みは学習効率の高さにある。数値型機械学習では、大量のデータと反復学習、前処理が必要だが、自然言語機械学習では少ないデータで済み、反復学習や前処理も不要な場合が多い。これは、LLMの事前学習知識や推論能力による抽象化が、学習データの削減に貢献するためである。数値型学習では、50次元の情報を学習するには1000件以上のデータと100回程度の反復学習が必要だが、自然言語学習では、50個の情報を含む文を数個用意すれば十分である。さらに、自然言語は抽象化によって複数の次元の情報を集約できるため、学習効率が飛躍的に向上する。LLMの自然言語処理能力は数値計算に比べて低速だが、自然言語機械学習の圧倒的な学習効率は、その低速さを補って余りある。大規模言語モデルのスケーリング則による能力向上限界も、自然言語機械学習への注目を強める要因となるだろう。</description>
    </item>
    
    <item>
      <title>ブログ記事のプレゼン動画自動生成</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_06_auto-presentation-video/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_06_auto-presentation-video/</guid>
      <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事では、ブログ記事からプレゼン動画を自動生成するシステムの開発について詳述している。著者は、生成AIを活用し、ブログ記事の内容を基にプレゼン資料(SVG形式)を作成、ナレーション原稿を生成、音声データ化、そして最終的に動画(mp4形式)を生成する一連の自動化パイプラインを構築した。

システムの核心は、プレゼン資料の自動生成にある。生成AIは画像生成に長けているものの、文字や図形中心のプレゼン資料作成は苦手とする。そこで、著者はSVG形式というテキストベースの図形記述言語を用いることで、生成AIにプレゼン資料の作成を依頼できるようにした。しかし、この方法では文字が枠からはみ出す問題が発生した。

この問題を解決するため、著者は以下の対策を講じた。まず、生成AIへの指示において、複雑な図形を避け、フォントサイズを固定するなどのルールを設け、文字数とフォントサイズから枠からはみ出さないか事前チェックする手順を指示に加えた。さらに、SVGファイルに事前検討のコメントを記録させることで、生成AIによる自己チェックを促した。しかし、完璧な生成は困難なため、後工程でのチェックが必要となった。

画像生成AIやチャット型AIによるはみ出し検出を試みたものの、精度が低かったため、最終的にはSVGテキストを解析し、文字サイズと枠サイズを比較して厳密に文字のはみ出しを検出するプログラムを自作した。このプログラムに加え、生成AIによるルール違反チェックを組み合わせることで、文字のはみ出しや複雑な図表の生成ミスを検出できるようになった。

NGが検出された場合は資料を破棄し再生成する。文字のはみ出しがない資料が生成されると、生成AIを用いてナレーション原稿を作成、text to speechで音声データ化し、最後にffmpegを用いて動画を生成する。この一連の処理は、生成AIとの対話を通して自動化された。

著者はこのシステムを実際に運用し、YouTubeに動画を公開開始している。しかし、GoogleのNotebookLMなど、同様の機能を持つAIツールが登場しているため、今後の自作システムの必要性には疑問が残るものの、生成AI活用の勘所を掴む大きな経験となったと結論付けている。</description>
    </item>
    
    <item>
      <title>マイクロ仮想知能としてのアテンションメカニズム</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_08_06_micro-vm-intelligence/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_08_06_micro-vm-intelligence/</guid>
      <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
      <description>この記事は、生成AIにおけるアテンションメカニズムの重要性と、それを発展させた独自の概念である「仮想知能」と「明示的アテンションメカニズム」を提案している。

まず、著者はトランスフォーマーの成功をアテンションメカニズムに帰結させ、その概要を説明する。アテンションメカニズムは、自然言語処理において、大量の単語から処理対象の単語に関連性の高い単語を選択的に処理することで、文脈理解の精度を高める仕組みである。長文でも重要な単語に焦点を当てることで、解釈の密度を保つことができる点が強調されている。

次に、著者は生成AIの業務利用における課題として、膨大なナレッジを効率的に扱う難しさに触れる。現状では、業務ごとにナレッジを分割してAIを構築する必要があり、複合的な作業には複数のAIを組み合わせる必要がある。そこで、著者は将来のAIが、状況に応じて必要なナレッジを自動的に選択する「仮想知能」という概念を提案する。これは、仮想マシンが複数のOSを同時に動作させるように、1つのAI内で複数の仮想的な知能を機能させることを意味する。これは、現在の生成AIが複数の人物による議論や物語生成を可能にしていることから、実現可能な概念であると著者は主張する。

そして、著者はアテンションメカニズムを「マイクロ仮想知能」と名付ける。アテンションメカニズムは、単語の集合の中から関連性の高い単語を選択するが、これは仮想知能がナレッジの集合から関連するナレッジを選択する仕組みと類似しているためである。

さらに、著者は「明示的アテンションメカニズム」という概念を提案する。「作業Aを実行する際には、ナレッジBとナレッジCを参照すること」といった明示的な指示を、アテンションナレッジとして記述することで、AIがどのナレッジを参照すべきかを明確化できる。このアテンションナレッジは、AIによって生成・更新可能であり、作業の失敗を反省してナレッジを追加することで、AIの性能向上に繋がるとしている。

最後に、著者はアテンションメカニズムが生成AIの能力向上に大きく貢献したことを再確認し、その本質が「場面毎に参照する情報を動的に絞る」ことにあると主張する。また、仮想知能や明示的アテンションナレッジは、アテンションメカニズムを再帰的に適用することで、知能を高度化させるカギになると結論付けている。</description>
    </item>
    
    <item>
      <title>空間認識の次元：AIの可能性</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_space-dimension-ai/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_space-dimension-ai/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、AIによる多次元空間の認識能力が、科学技術の発展に革命を起こす可能性を論じています。著者は、人間が三次元空間を認識する仕組みを参考に、AIが四次元以上の空間をシミュレートし、その情報を二次元に写像することで、人間が視覚的に理解できる可能性を示唆しています。AIであれば、三次元や四次元以上のグラフを、データが隠れたり回転を必要とせず、次元ネイティブに俯瞰して把握できると主張しています。この能力により、多次元データを低次元に写像することなく、ネイティブに理解できるようになり、複数の次元をまたいだトレンド分析や、データパターンの分析、規則性や法則の発見などが容易になります。これは、既存のAIが得意とする多次元データのパターンマッチングを超えた、真の意味でのデータ理解につながると著者は述べています。さらに、著者は、この多次元視覚能力を持つAIによって、天動説から地動説への移行や、相対性理論、量子力学といった科学的発見が加速された可能性を指摘し、高次元のデータをネイティブに把握することで、人類が未発見の様々な理論や法則を見つけ出すパラダイムイノベーションが加速すると結論づけています。ただし、あまりにも高次元のパラダイムは、人間には理解し切れない可能性があり、原理を理解できないまま、AIが開発した製品やシステムに囲まれて暮らす未来も予想されると述べています。</description>
    </item>
    
    <item>
      <title>シンフォニックインテリジェンスの時代</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_symphonic-intelligence/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_symphonic-intelligence/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、生成AIの活用における次の段階として「シンフォニックインテリジェンス」という概念を提示しています。まず、生成AIの現状の活用方法を、イテレーション作業（トライアンドエラー的な作業）とフロー作業（定型化された作業）の2つの視点から分析しています。イテレーション作業では、生成AIはツールとして用いられ、人間の作業効率を向上させますが、人間の能力がボトルネックとなる限界があります。そのため、作業をフロー作業化し、システム化することで、生成AIと人間のタスクを明確に分け、生成AIの効率と精度を最適化し、ナレッジの蓄積と共有を容易にすることを提案しています。さらに、将来の生成AIは、仮想知能（単一の生成AIが複数の役割を切り替えながら処理を行う能力）と知能オーケストレーション（複数の役割やナレッジを自在に組み合わせて作業を行う能力）を獲得すると予測しています。仮想知能と知能オーケストレーションを備えた生成AIは、人間の知能のように、柔軟に複数の知的タスクをこなすことができ、「シンフォニックインテリジェンス」と呼ばれます。これは、オーケストラのように、それぞれの生成AIが役割を担いながら全体として高度な知的作業を実行する状態です。最終的には、シンフォニックインテリジェンスな生成AIは、様々なイテレーション作業をこなす過程で、作業に共通する法則やナレッジの構造を理解し、人間の指示だけで新たな作業を学習できるようになり、AGI（Artificial General Intelligence）の一つの姿になると結論づけています。</description>
    </item>
    
    <item>
      <title>仮想知能のオーケストレーション</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_virtual-intelligence-orchestration/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_30_virtual-intelligence-orchestration/</guid>
      <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、仮想マシン技術になぞらえて、単一の人工知能モデル内で複数の仮想的な知能（仮想知能）を協調動作させる「知能オーケストレーション」という概念を提案しています。仮想マシン技術が複数の仮想コンピュータを1台の物理マシン上で動作させるように、知能オーケストレーションは、単一の人工知能モデル内で、異なる役割や機能を持つ複数の仮想知能をプロンプトによって制御し、複雑な知的作業を遂行させます。

従来、複数の人工知能を連携させるには、システムオーケストレーションによるシステム開発が必要でしたが、知能オーケストレーションでは、プロンプトエンジニアリングだけで実現可能です。これにより、システム開発のオーバーヘッドを削減し、柔軟かつ迅速なシステムの改良・機能追加が可能になります。

さらに、知能オーケストレーションは、単なるタスクの分担だけでなく、「熟考」という高度な知的活動にも応用できると主張しています。複数の仮想知能を異なる視点で問題にアプローチさせることで、多角的な視点からの熟考を促し、思考の精度向上、幅の拡大、新たな発見や創造性の発揮に繋がると期待されています。この熟考のプロセス自体も、仮想知能の役割や構造の変更、スクラップ＆ビルドを繰り返すことで試行錯誤的に進化させることができ、「究極の熟考」と呼んでいます。

具体的には、複数の仮想知能を役割に応じて切り替えながら、情報処理や知識の更新、要約、整理を行い、人間の代替として高度な知的作業を実行できる可能性を示唆しています。短期記憶の制約（入力トークン数）内での知識の効率的な管理も可能になり、ビジネスシーンにおける人工知能の活用範囲が大幅に拡大すると予測しています。

要約すると、この記事は、知能オーケストレーションという新しい概念を提示し、それがシステムオーケストレーションに比べて柔軟性と効率性が高く、高度な知的活動、特に熟考のプロセスを促進し、人工知能のビジネス活用を飛躍的に進展させる可能性を秘めていると主張しています。その実現方法は、単一の人工知能モデルへの巧妙なプロンプト設計によって実現されるという点が大きな特徴です。</description>
    </item>
    
    <item>
      <title>シミュレーション思考と生命の起源</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_29_simulation-thinking/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_29_simulation-thinking/</guid>
      <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、累積と相互作用を段階的に追跡し、結果を論理的に理解する思考方法を「シミュレーション思考」と定義し、生命の起源とソフトウェア開発への応用を論じています。

生命の起源については、単純な化学物質から複雑な細胞が生まれた過程を、一瞬の奇跡ではなく、地球規模での化学物質の循環と反応の繰り返しによる累積的な変化として説明しています。地球上の水や大気の循環により、局所的に生じた化学反応の結果が拡散し、地球全体で化学物質の複雑さが増していく過程を、シミュレーション思考を用いて段階的に追跡することで、生命の起源の第一歩を説明しています。この第一歩は、シンプルな化学物質から、自己維持、複製、代謝の性質を備えた、より複雑な化学物質が生成される過程であり、地球規模での現象であると主張しています。

さらに、ポリマーの存在や、太古の地球を覆っていた粉塵の雲による紫外線遮蔽効果、無数の湖や池が提供する隔離された反応環境などが、複雑な化学物質の生成を促進した要因として挙げられています。これらの要素を組み合わせることで、生命に必要な複雑な化学物質が地球規模で生成され、それが生命の誕生につながる可能性を示唆しています。

ソフトウェア開発への応用として、プログラムがメモリ空間上のデータの累積的な相互作用であることを指摘し、ソフトウェア開発における要求分析、要件整理、仕様定義、基本設計といった工程が、自然言語を主に用いたシミュレーション思考に基づいていると説明しています。ソフトウェア開発者は、コンピューターの内部動作と顧客の要求をシミュレーション思考によって把握し、顧客の要求を実現するプログラムを作成していると主張しています。この二重のシミュレーション思考は、ソフトウェア開発者にとって不可欠なスキルであると結論付けています。

シミュレーション思考は、コンピューターシミュレーションのような厳密な形式表現を用いるものではなく、自然言語を用いた、全体の傾向や性質の変化を捉える思考方法であると強調しています。そして、このシミュレーション思考は、生命の起源のような複雑な問題だけでなく、組織や社会の仕組みの理解にも役立ち、これからの社会で重要になるスキルであると結論づけています。</description>
    </item>
    
    <item>
      <title>フロー作業化とシステム：生成AI活用の本質</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_29_tool-vs-system/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_29_tool-vs-system/</guid>
      <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、生成AIの有効活用について、ツールとシステム、イテレーション作業とフロー作業という2つの概念を用いて論じています。単なるツールとして生成AIを利用するだけでは真の価値は生み出せず、イテレーション作業をフロー作業化し、システム化することで、生産性と品質の大幅な向上が期待できると主張しています。

まず、イテレーション作業（試行錯誤を繰り返しながら成果物を作り上げる作業）とフロー作業（段階的に作業を進めて成果物を出す作業）の違いを明確化します。そして、産業革命やIT革命がイテレーション作業のフロー作業化とシステム化によって生産性と品質を向上させた事例として挙げられています。

生成AI革命においても、AIをツールとして利用するのではなく、イテレーション作業をフロー作業化し、システム化することが重要だと強調しています。生成AIは臨機応変な対応が可能なため、イテレーション作業を担うことができますが、生産性と品質には限界があるためです。人間の作業者を前提としたフロー作業化は困難ですが、生成AIであれば担当や作業内容の変更に容易に対応できます。これは、生成AIが前の手順を忘却でき、新しい手順を瞬時に理解できるためです。

具体的な例として、社内ルールに関する社員からの問い合わせ対応を取り上げます。生成AIをツールとして利用するだけでは、効率化は限定的です。しかし、問い合わせ対応作業をフロー作業化し、システム化することで、大幅な効率化が期待できます。フロー作業化では、問い合わせ対応の各手順を詳細化し明文化します。システム化では、問い合わせチャネルを一本化したり、システムが直接問い合わせを受け付けるようにしたりすることで、生成AIを中心としたシステムを構築します。

システム運用においては、生成AIのミスを減らすために、指示書に注意点や確認点、ミスの事例と正解例を加えていきます。この指示書更新作業もフロー作業化することで、さらに効率化を図ります。このように、フロー化した作業をシステム化することで、人間が行わなければならないように見える作業でも、生成AIを中心としたシステムに置き換えることが可能になります。

最後に、生成AIの業務活用は効果がない、あるいは時期尚早だという誤解について、生成AIをツールとして利用することにフォーカスしていること、生成AIにイテレーション作業を実行させることにフォーカスしていること、という2つのパターンを指摘し、それらを克服するために、イテレーション作業をフロー作業化し、システム化していくという発想の転換が必要だと結論付けています。</description>
    </item>
    
    <item>
      <title>リキッドウェア時代の全方位エンジニア</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_28_liquidware-allrounder/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_28_liquidware-allrounder/</guid>
      <pubDate>Mon, 28 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、生成AIによる自動プログラミング技術の進歩によって、ソフトウェア開発が大きく変化し、&quot;リキッドウェア&quot;と呼ばれる新たなソフトウェア形態が登場しつつあると主張している。リキッドウェアとは、ユーザーが生成AIを用いて、ソフトウェアの機能やインターフェースを自由にカスタマイズできるソフトウェアのことである。

まず、著者は生成AIがプログラミングを自動化できるようになった現状を説明する。大規模言語モデルに基づく生成AIは、プログラミング言語を理解し、テストを繰り返しながらプログラムを生成できる。そのため、プログラミング経験のない人でも、生成AIを利用してソフトウェア開発が可能になりつつある。著者は自身の経験に基づき、生成AIを活用したソフトウェア開発の現状と可能性を示している。

次に、リキッドウェアの概念が提示される。リキッドウェアは、ユーザーが生成AIを使って、ソフトウェアを自在に改変できるため、従来のソフトウェアとは異なる柔軟性とパーソナライズ性を備えている。ユーザーは、自分の好みに合わせて画面デザインを変更したり、便利な機能を追加したりすることができる。ソフトウェア開発者にとっても、リキッドウェアは、ユーザーのカスタマイズ対応の手間を省き、ユーザー満足度を高めるメリットがある。

そして、リキッドウェア時代におけるソフトウェアエンジニアの役割変化が論じられる。プログラミングの自動化により、ソフトウェア開発におけるプログラミングの比重は小さくなる一方、クラウドインフラ、ネットワーク、セキュリティ、データベースなど、システム全体の幅広い知識とスキルが必要となる。このようなスキルを持つ人材として、フルスタックエンジニアを超えた&quot;全方位エンジニア&quot;が登場すると予測される。

全方位エンジニアは、様々なシステムスタックに関する知識を持ち、生成AIを活用しながら、複数のシステムを連携させた複合的なソフトウェア開発をリードする役割を担う。また、全方位エンジニアは、生成AIが生成したプログラムのバグやセキュリティホールを見抜き、将来的な拡張性を考慮した開発プロセスを設計する能力も求められる。

最後に、全方位エンジニアが活躍する具体的な事例として、通販Webアプリの刷新プロジェクトが紹介される。このプロジェクトでは、ユーザーコミュニティプラットフォーム化、オムニデバイス・オムニプラットフォーム対応、業務システム刷新、リキッドウェア対応など、多様な要素が組み合わされており、全方位エンジニアの能力が不可欠である。

全体として、この記事は生成AIの技術進歩によって、ソフトウェア開発のあり方、エンジニアの役割、そしてソフトウェアそのものが大きく変化していく未来像を提示している。リキッドウェアや全方位エンジニアは、もはや未来の話ではなく、現在進行形で実現しつつある現象であると主張している点が重要である。</description>
    </item>
    
    <item>
      <title>考える宿命：AIと人間</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_12_fate-of-thinking/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_12_fate-of-thinking/</guid>
      <pubDate>Sat, 12 Jul 2025 00:00:00 GMT</pubDate>
      <description>この記事では、AIの進歩による知的労働の自動化によって、人間は考えることをやめるのではなく、むしろこれまでとは異なる種類の思考が求められるようになるという主張が展開されています。著者は、オブジェクト指向プログラミングを超えた新たなパラダイムとして「プロセス指向」を提案し、ソフトウェア開発における考え方の転換を論じています。プロセス指向では、ソフトウェアの構成要素をプロセスとして捉え、個々のプロセスは独立して動作し、必要に応じて連携する構造をとります。これにより、AIによるプログラミング支援と相性が良く、共通モジュールの削減による複雑化回避、個別最適化が可能になります。このプロセス指向の考え方は、ソフトウェア開発にとどまらず、社会全体にも適用できると主張されます。AIによる効率化が進む社会では、全体最適ではなく個別最適が重視され、「個別最適化社会」が到来すると予測します。個別最適化社会では、個々の状況に合わせた柔軟な判断が求められ、そのためには「主観的哲学」に基づいた深い熟考が必要となります。主観的哲学とは、あらゆる出来事の個別性を尊重し、責任ある判断を下す倫理観です。そして、個別最適化社会においては、個々の状況に合わせた最適な判断を行うための「フレームワーク設計」能力が重要になります。AIは知的労働を効率化しますが、最終的な判断は人間が行う必要があり、考えることを放棄することは許されなくなります。よって、AI時代において人間は、考える宿命にあると結論付けています。</description>
    </item>
    
    <item>
      <title>業務プロセス指向への招待</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_07_11_business-process-oriented/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_07_11_business-process-oriented/</guid>
      <pubDate>Fri, 11 Jul 2025 00:00:00 GMT</pubDate>
      <description>This article introduces &quot;business process-oriented software,&quot; a new approach to software development that emphasizes aligning software design with how humans naturally perceive and organize work processes.  Traditional object-oriented software focuses on encapsulating data and processes within objects.  The author argues that, in the context of organizational activities, this approach falls short because it often separates crucial elements – such as manuals, systems, and input information – leading to inefficiencies during modifications or updates. The core idea of business process-oriented software is to integrate these elements into a single, executable file. This file, essentially a manual with embedded input fields and contact information for subsequent tasks, serves as the software itself. It doesn&apos;t require complex programming; instead, the software&apos;s execution is handled by humans, following the steps outlined in the manual. The author likens this file to a program, with the manual functioning as instructions and input fields as data storage locations.  This approach allows for easy updates and improvements to business processes simply by modifying the file.  Furthermore, the article highlights the synergy of this concept with artificial intelligence (AI). AI can assist in executing tasks within the file by automatically handling certain processes or prompting human users for information input through various user-friendly interfaces.  This collaboration between AI and human workers optimizes efficiency, allowing humans to focus on minimal, user-friendly tasks while the AI manages the complexities of learning and adapting to changes in processes. The author suggests a markdown-formatted text file as an ideal format for this AI-assisted workflow. This system encourages knowledge accumulation and continuous improvement through a centralized contact point for questions, improvement suggestions, and the natural accumulation of experience within the business process documentation.  In essence, business process-oriented software, aided by AI, fosters a &quot;high-speed learning organization&quot; by streamlining work processes, reducing the burden of continuous learning for human workers, and enabling rapid adaptation and improvement within the organization.</description>
    </item>
    
    <item>
      <title>フレームワーク設計という知的能力</title>
      <link>https://katoshi-mfacet.github.io/ja/articles/2025_06_29_framework-design-ability/</link>
      <guid>https://katoshi-mfacet.github.io/ja/articles/2025_06_29_framework-design-ability/</guid>
      <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
      <description>この記事は、科学におけるフレームワーク設計の重要性と、そのスキルセットについて論じています。まず、科学は観察による事実発見を主とする一方、開発は設計による発明を主とする、異なる知的活動であると指摘します。しかし、学問の中にも設計による発明、すなわちフレームワーク設計が存在し、天動説と地動説、ニュートン力学と相対性理論などを例に、それらが正しさではなく有用性によって選択される枠組みであると説明します。これらの枠組みの変更はパラダイムシフトと呼ばれますが、著者は「パラダイム発明」や「パラダイムイノベーション」という表現を用いる方が適切だと主張します。

次に、観察による発見と設計による発明は異なる知的活動であり、異なるスキルセットを必要とするため、全ての学者や研究者が設計による発明のスキルセットを持っているわけではないと述べます。多くの学者は既に発明されたフレームワークの中で研究を行うことに長けており、フレームワーク設計のスキルセットはあまり身についていないのが現状だと指摘します。

一方、開発を行うエンジニアは設計スキルを必須としており、日々の業務を通してそのスキルを蓄積します。しかし、この設計スキルは各分野に特有であり、他の分野への応用は容易ではありません。特に、学問におけるフレームワーク設計は抽象的な概念をメタレベルで組み替える特殊なスキルを必要とします。

ソフトウェアエンジニアは、ソフトウェア設計において抽象的な概念をメタレベルで組み替えることを日常的に行っているため、学問におけるフレームワーク設計を行うためのスキルセットを持っている可能性が高いと主張します。ただし、高度な応用のためには抽象的な概念設計の能力と、新しい設計モデルを考える習慣が不可欠であると結論づけています。</description>
    </item>
    
  </channel>
</rss>