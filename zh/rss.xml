<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Articles (zh)</title>
<link>https://katoshi-mfacet.github.io/zh/rss.xml</link>
<description>Latest articles (zh)</description>
<item>
  <title>作为微型虚拟智能的注意力机制</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/08_06_Micro-VM-Intelligence/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/08_06_Micro-VM-Intelligence/</guid>
  <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
  <description>文章探讨了 Transformer 模型的核心——注意力机制，并将其与“虚拟智能”和“微型虚拟智能”的概念联系起来，提出了一种实现高级智能的新视角。注意力机制的核心在于其能够动态地识别并关注文本序列中的相关部分，从而有效地处理长距离依赖关系和指代不明的问题。它通过学习在处理一个词语时，应该“关注”句子中哪些先前词语，从而过滤掉不必要的词语，保持解释密度，无论文本长度如何。

文章随后引入了“虚拟智能”的概念，将其定义为一种在内部根据情况切换所需知识集的能力，而无需人工进行知识分段。作者将其类比为虚拟机，认为未来的生成式 AI 可以在一个智能体内部运行多个具有不同专长的“虚拟智能”。目前的生成式 AI 已经能模拟多人讨论或生成多角色的故事，这表明虚拟智能是当前生成式 AI 能力的延伸。

作者进一步提出，“虚拟智能”的机制——根据任务缩小知识范围——与注意力机制有相似之处，两者都实现了“只关注相关的知识”。然而，注意力机制作用于词语集合，而虚拟智能作用于知识集合。基于此，作者将注意力机制定义为“微型虚拟智能”。

在此基础上，文章提出了“显式注意力机制”的概念，认为可以通过构建一个宏观的注意力机制来实现虚拟智能，而无需修改大型语言模型的内部结构或进行神经网络训练。这种宏观注意力机制可以是一个用自然语言写成的明确句子，例如“执行任务 A 时，请参考知识 B 和知识 C。”这个句子本身就构成了“注意力知识”，明确指示了执行特定任务时应关注的知识。作者指出，这种注意力知识可以由生成式 AI 自身生成或更新，例如，在某个任务因知识不足而失败时，可以更新注意力知识以包含更多参考信息。

结论部分强调，注意力机制极大地提升了生成式 AI 的能力，并且动态缩小参考信息范围的机制本身似乎是高级智能的本质。作者认为，无论是微型虚拟智能（注意力机制）还是虚拟智能（通过显式注意力知识实现），注意力机制在各个层面递归地提升智能方面发挥着关键作用。</description>
</item>
<item>
  <title>虚拟智能编排</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Virtual-Intelligence-Orchestration/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Virtual-Intelligence-Orchestration/</guid>
  <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
  <description>文章探讨了“虚拟智能”的概念，将其类比于计算机中的虚拟机技术，指出虚拟智能是存在于实际智能之上的能力，如同人类在对话或扮演角色时展现出的能力。对话式AI在生成多人对话或让角色回应指令时，也表现出高水平的虚拟智能。文章进一步引入“智能编排”的概念，与计算机系统中的“系统编排”进行对比。系统编排通过组合具有不同规格和功能的计算机来构建分布式协作系统，允许灵活更改配置。在AI应用中，系统编排可用于结合多个具有不同角色的AI来执行组织任务，但需要进行系统开发，并且灵活性受限。

智能编排则提出了一种新的范式，即利用单个AI作为实体，在其处理过程中组合多个虚拟智能来执行组织任务。与系统编排不同，智能编排无需系统开发，仅通过提示指令即可实现，从而在改进和功能添加方面更加灵活和迅速。通过常规聊天界面即可完成组织任务的智能编排，极大地简化了AI的应用流程。

文章还深入探讨了智能编排在“终极熟虑”方面的潜力。通过指示AI利用其智能编排技能进行“思考”，可以促使其进行多视角而非仅多信息整合的熟虑。AI能够通过智能编排的特性，反复迭代改进和添加功能，甚至废弃和重建虚拟智能的角色和结构，从而实现对熟虑方法本身的试错。这种终极熟虑能够减少误解和错误，提高思维准确性，拓宽思维广度，并通过多方面视角的结合产生新的发现和创造力。

结论认为，虚拟智能使得单个AI模型能在熟虑过程中灵活切换与角色和任务相关的知识，无需系统编排即可实现高级的组织性智力活动。通过有组织的熟虑，AI能分析失败经验更新知识，并总结短期记忆的输入限制内的信息。这将显著扩展AI在商业环境中替代人类执行任务的应用场景。</description>
</item>
<item>
  <title>交响智能时代</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Symphonic-Intelligence/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Symphonic-Intelligence/</guid>
  <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
  <description>本文探讨了生成式AI应用的现状和未来，提出了“交响智能”这一新概念。文章首先区分了“迭代工作”和“流程工作”。迭代工作是指人类通过试错方式组合多个任务，最适合使用工具，而生成式AI目前主要被用作迭代工作中的工具。然而，工具在迭代工作中的效率提升有限，人类自身成为瓶颈，且资深与新员工之间存在难以弥合的技能差距。

为了克服这些限制，文章提出将迭代工作转化为标准化的“流程工作”并进行系统化。通过系统连接由生成式AI执行和人类执行的任务，可以优化生成式AI在具体任务上的效率和准确性，并实现知识的共享与积累，使智力工作趋向自动化。这种方法能够逐步将任务分工转移给生成式AI，最终实现由AI驱动的自动化流程。

进一步，文章引入了“虚拟智能”和“智能编排”的概念。由于当前生成式AI在专注于特定任务时表现更佳，理想的机制是通过系统连接多个专业化的生成式AI。但未来，随着生成式AI性能提升，它们可能在单次运行中通过切换角色和知识进行处理，从而消除连接AI所需的系统，实现AI内部的系统集成。这种能力被称为“虚拟智能”，类似于虚拟机技术，允许单个AI模拟多个角色或处理复杂场景。将多种角色和知识自由组合以执行任务的能力则称为“智能编排”。

达到这一阶段的生成式AI即为“交响智能”，其运作方式类似于管弦乐队，精通各自领域并在整体上协同工作。作者认为人类智能本身就是交响智能的一种体现，能够灵活执行复杂的智力任务并运用专业知识。文章将交响智能视为生成式AI的终极目标。

最后，文章讨论了AGI（通用人工智能）的一种形式。当能够模拟交响智能的生成式AI通过流程工作和任务知识库处理大量迭代任务后，它们可能掌握任务中的共同原则和结构模式。届时，它们只需通过观察人类执行未知任务即可学习专业知识，并能自动积累和共享知识，学习能力将远超人类，达到真正意义上的AGI。</description>
</item>
<item>
  <title>空间感知的维度：AI的潜力</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Space-Dimension-AI/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_30_Space-Dimension-AI/</guid>
  <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
  <description>文章探讨了人类和人工智能（AI）在感知和理解高维度空间方面的潜力，特别是对四维及以上空间的研究。文章指出，人类通过视觉信息（二维图像）来感知三维空间，大脑会将二维视觉信息逆映射到内部的三维空间图像。作者提出，借鉴这一原理，人类有可能通过计算机模拟四维空间，并将模拟结果映射到二维平面上，从而通过视觉学习和掌握四维空间的概念和行为，最终在头脑中构建四维空间感知能力。然而，作者也指出，这一过程需要漫长的时间训练，且即使获得该能力，实际应用场景也极为有限。

在AI方面，文章认为AI能够实现类似人类的多维空间感知能力，并且可能从中获益更多。AI可以全面、原生（维度内）地掌握三维乃至四维图表，而无需像人类那样受限于二维视觉信息的局限，也无需通过旋转等方式来揭示隐藏部分。这使得AI能够更直观、全面地理解多维数据，例如跨多个维度进行趋势分析、大小比例比较，以及发现数据模式、规律和法则。文章强调，AI的多维视觉能力将超越当前多维数据模式匹配的局限，实现更深层次的数据理解，例如在不同维度组合中发现相似的模式，即使人类或传统AI难以识别。此外，AI还能通过调整特定轴的权重（如放大缩小、取对数）等方式，探索有助于数据理解的维度结构，从而发现对人类而言难以理解的全面数据结构，可能带来新的见解和规律。

文章进一步论述了这种直接理解高维数据而非降维映射的能力，对加速范式创新的巨大潜力。作者类比了日心说和地心说的例子，认为如果能原生理解天文观测数据，类似日心说的发现可能会更早发生。同样，若能原生理解多维数据，相对论和量子力学等科学理论的发明和普及可能会被大大加速。因此，多维原生AI有望加速科学范式的创新，发现人类尚未知的理论和规律。

在结论部分，作者预测经过多维空间训练的AI，将能利用其超乎人类的多维感知能力，迅速扩展科学和学术的范式。这些范式的增殖可能带来人类难以完全理解的复杂性，甚至导致人类生活在被AI驱动但底层原理不明的系统之中。尽管AI可能会将高维范式映射为人类易于理解的形式，但人类可能无法跟上所有扩展的范式，由此可能产生一种“理解鸿沟”。</description>
</item>
<item>
  <title>基于流程的工作与系统：生成式AI利用的本质</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_29_Tool-vs-System/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_29_Tool-vs-System/</guid>
  <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
  <description>本文探讨了在业务中利用生成式AI（Generative AI）提升生产力和质量的核心在于将“迭代工作”转化为“基于流程的工作”并进行系统化。作者首先区分了工具与系统的概念，指出系统并非只是复杂的工具，而是在特定工作类别下才能显现其优越性。文章将工作分为“迭代工作”（通过试错、灵活调整逐步完成）和“基于流程的工作”（分阶段推进，最终产出可交付成果）。对于迭代工作，工具包是有效的；而对于基于流程的工作，系统则能显著提升生产力和质量。

作者进一步以工业革命和信息技术革命为例，说明了将迭代工作转化为基于流程的工作并系统化是提升生产力和质量的关键。在这些革命之前，制造业和信息处理工作多为迭代性质，依赖手工工具和非标准化方式。通过引入工厂生产线和企业IT系统等，将这些流程系统化，极大地提高了效率。文章强调，系统化之所以可能，更重要的是实现了“流程化转型”。

在生成式AI的语境下，作者认为，若仅将AI视为工具处理迭代任务，则无法释放其真正价值。关键在于将迭代工作转化为基于流程的工作，并加以系统化。虽然生成式AI能够灵活处理迭代任务，但迭代工作的固有局限性决定了其生产力和质量的上限。而生成式AI的优势在于，作为执行者，它能够通过试错轻松地重新配置任务分配和内容，并能按新程序工作，这使得基于流程的转型和系统化在AI的参与下变得更为可行和高效。

文章通过一个回复员工关于公司规章制度咨询的例子，阐述了两种不同的AI利用方式。一种是将生成式AI仅用作工具，辅助搜索和起草答案，效率提升有限，因为咨询处理本质上仍是迭代工作。另一种是将其转换为基于流程的工作。这需要详细定义工作流程，包括接收咨询、判断是否重复、确认规则、起草答案、检查错误、获得批准、回复、记录历史、更新FAQ、发布等一系列规范化步骤。通过明确这些任务细节并连接起来，将灵活的迭代工作转变为清晰的流程。

系统化则是在明确流程后进行的。这可能涉及整合咨询渠道以牺牲部分员工便利性，或保持多渠道以优先考虑便利性。关键在于系统应直接接收咨询（口头咨询除外），并让IT系统和生成式AI尽可能按流程执行。通过持续更新AI指令（加入警告、检查点、错误与正确示例）来减少其错误，并将AI指令的更新过程本身也流程化，可以实现持续改进。最终目标是让以生成式AI为中心的系统取代大部分需要人工干预的任务。

作者最后指出了两种常见的生成式AI商业应用误解：一是将AI仅视为工具处理迭代任务，效果不佳；二是试图让AI直接执行人类的迭代任务，因AI的局限性而效果不彰。真正有效的方法是转变思维，将工作客观地转化为基于流程的流程并系统化，从而实现机制自身的持续改进，达到比单纯使用工具更高的效率。</description>
</item>
<item>
  <title>模拟思维与生命起源</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_29_Simulation-Thinking/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_29_Simulation-Thinking/</guid>
  <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
  <description>本文探讨了“模拟思维”这一概念，并将其应用于理解生命起源这一复杂问题。作者将模拟思维定义为一种逐步追踪累积和相互作用结果，并以此来逻辑地理解现象的思维方式，将其类比为理解零花钱翻倍增长的数学问题。作者认为，许多人难以理解复杂现象并非源于知识或能力的不足，而是思维方式的局限。

在生命起源方面，作者将模拟思维应用于解释复杂的细胞如何从简单的化学物质演化而来。文章提出，生命起源并非源于偶然的奇迹，而是地球化学物质在行星尺度上反复循环、局部反应、扩散混合和相互作用的累积结果。这一过程导致化学物质从简单状态逐渐转变为包含更复杂、更多样化化学物质的状态。作者强调，即使是简单的化学物质组合，只要能维持一定的恒定数量，就已具备了通过代谢实现自我维持的性质，并且其大规模存在和自我复制效应（产生更多相同化学物质）是生命起源的第一步和本质。

文章进一步阐述了生命起源的下一步，即地球过渡到包含更复杂化学物质的状态，以及化学物质复杂性的累积和自我维持、复制、代谢机制的逐步演化。聚合物（如蛋白质和核酸）的形成及其单体的存在，以及地球上众多的湖泊、池塘作为独立的化学反应场所，都为这种演化提供了基础。粉尘云假说被提出，认为远古地球被火山灰和粉尘云覆盖，阻挡紫外线，为单体合成提供了催化剂和能量来源，是“终极的单体工厂”。

作者区分了模拟思维与计算机模拟，指出模拟思维可以在自然语言中进行，不依赖于严格的形式化表达，而是基于逻辑结构、科学事实和客观推理，称之为“自然数学”。这种思维方式能够把握整体趋势和属性变化。

在软件开发领域，模拟思维被认为是不可或缺的技能。软件开发过程本质上是数据的累积和相互作用，开发者需要通过自然语言理解客户需求（语义性模拟思维），并将其转化为可执行的程序（原理性模拟思维），这都需要运用模拟思维。作者认为，软件开发人员因其工作性质，特别适合培养这种能力。

最后，文章总结道，模拟思维能够帮助人们理解生命起源等复杂科学奥秘，也能应用于组织和社会结构等领域。具备模拟思维技能的人将在未来社会发挥重要作用。</description>
</item>
<item>
  <title>液态软件时代的“全能型工程师”</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_28_Liquidware-Allrounder/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_28_Liquidware-Allrounder/</guid>
  <pubDate>Mon, 28 Jul 2025 00:00:00 GMT</pubDate>
  <description>文章探讨了生成式AI在软件开发领域的革命性影响，预示着“液态软件”和“全方位工程师”时代的到来。首先，文章指出生成式AI，特别是基于大型语言模型的对话式AI，能够理解并执行编程任务，类似于人类程序员将需求“翻译”成代码。AI的编程能力结合了测试驱动的迭代优化，大大提高了程序生成的效率，尽管目前仍受限于指令的精确性和AI自身能力。随着AI能力的提升和人类指令方法的改进，AI自动生成程序的范围正在扩大。

文章进而提出了“液态软件”的概念，即软件的部分功能可以由用户通过生成式AI在软件使用过程中自行修改和定制。这种用户驱动的定制化将使得软件的功能比以往更加流畅、适应性更强，能完美契合个体用户的需求。整体软件功能将由硬件、开发者提供的软件以及用户修改的液态软件共同构成。液态软件的普及还将催生整合跨平台信息和功能的可能性，实现个性化设备体验。

文章强调，“液态软件”并非遥远的未来概念，而是正在发生的现象。例如，电子商务网站的用户界面定制可以通过修改浏览器端的HTML、CSS、JavaScript文件实现，这些修改可以在服务器端为每个用户单独存储和管理。生成式AI可以协助完成这些定制过程。

在这样的背景下，文章提出了“全方位工程师”的概念。随着AI承担更多编程工作，软件开发成本降低，对能够独立编写代码的工程师需求减少，取而代之的是对拥有广泛知识和技能的全栈工程师的需求增加。然而，随着软件项目日益复杂，需要整合不同系统栈（如Web应用、后端业务系统、移动应用、嵌入式系统等），仅仅具备单一系统栈的全栈知识已不足够。全方位工程师需要具备跨越多个系统栈的能力，能够进行宏观设计，统揽全局，并指导AI和专精工程师完成开发。他们无需精通所有细节，而是要设计用于管理和规避AI编程风险（如错误、安全漏洞、技术债务）的程序和机制。

全方位工程师的核心角色包括设计跨多个系统栈协同工作的软件功能分布，以及规划和管理整个软件的开发流程。文章通过一个复杂的电子商务平台转型案例（包含用户社区、全设备/平台兼容性、业务系统更新、液态软件兼容性）说明了全方位软件开发的需求，并指出在生成式AI的辅助下，这样的项目变得可行且极具吸引力。

最后，文章总结，生成式AI推动了液态软件和全方位软件开发，IT工程师应努力成为全方位工程师，并预见其职责将进一步扩展至全方位业务工程、全方位社区工程，乃至旨在改善社会的“全方位社会工程”。</description>
</item>
<item>
  <title>思考的宿命：AI与人类</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_12_Fate-of-Thinking/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_12_Fate-of-Thinking/</guid>
  <pubDate>Sat, 12 Jul 2025 00:00:00 GMT</pubDate>
  <description>本文探讨了在人工智能（AI）时代，人类将面临的思维模式转变和“思考的宿命”。作者认为，AI将接管传统的脑力劳动，但人类并非因此免于思考，而是将被要求进行一种不同类型的、更深入的个体化思考。

文章首先提出了“过程导向软件”的开发范式，作为面向对象的下一代。过程导向将整个流程（从事件触发到终止）视为一个单一的、可管理的单元，其中包含执行所需的所有处理、变量和数据。这种方法符合人类直觉，并允许辅助过程独立于主过程插入，而无需修改主过程。作者进一步指出，在AI辅助编程的背景下，过程的冗余实现可能比通用性更有利，因为AI可以降低管理相似但不同实现的成本。这种策略体现了从“全局优化”到“个体优化”的思维转变，允许对类似过程进行单独调整，以避免通用性带来的结构复杂化。

接着，作者将这一思维模式延伸到社会层面，提出了“个体优化社会”的概念。与追求效率和标准化的全局优化不同，个体优化社会强调根据个体情况和环境做出灵活判断。尽管社会已存在对个体情况的考虑（如法律中的例外条款），但AI驱动的高效率将进一步削弱全局优化的价值，使得对每个个体情况进行仔细判断的个体优化成为可能。这种转变意味着对普遍规则的僵化应用将减少，取而代之的是更细致的、情境化的决策。

文章引入了“主观哲学”来描述这种伦理观。它认为，考虑“此时此地”的个体性并做出判断的行为本身就具有价值。无论结果如何，只要判断是经过深思熟虑且问责的，就是合乎伦理的。这与忽视个体性、墨守成规的标准化判断形成对比。主观哲学要求对每个事件的个体性进行审慎的、多角度的评估。

在“框架设计”部分，作者强调了框架（概念结构）在优化中的关键作用。在全局优化中，框架倾向于抽象和简化，从而丧失个体性；而在个体优化中，则需要为特定事件或主体设计框架，以把握其个体性。这要求更多人具备设计框架的能力和技能。

最后，作者总结了“思考的宿命”：AI能够执行计算和通用判断，但最终的、需要责任的判断必须由人类（“我”）来做出。AI只能提供信息和建议。即使在AI时代，人类也无法逃避为每个事项设计独立框架并进行审慎思考的任务，这可能意味着需要比以往更多的思考。逃避思考的借口将不再成立，人类将不得不面对并履行其思考的宿命。</description>
</item>
<item>
  <title>业务流程导向的邀请</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/07_11_Business-Process-Oriented/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/07_11_Business-Process-Oriented/</guid>
  <pubDate>Fri, 11 Jul 2025 00:00:00 GMT</pubDate>
  <description>本文提出了一种名为“业务流程导向软件”（Business Process-Oriented Software, BPOS）的新型软件开发和组织活动执行方法。文章首先回顾了组织活动的基本构成——由相互关联的业务流程组成，而业务流程又可分解为由部门和个人执行的任务。接着，文章回顾了面向对象软件（Object-Oriented Software, OOS）的核心思想，即通过将密切相关的数据和处理封装在“对象”这一单元中，提高软件的可维护性和可理解性，并指出这种设计方法符合人类的认知习惯，是其得以普及的重要原因。

在此基础上，作者提出了BPOS的核心概念：将与业务流程相关的关键信息和功能，置于业务流程这一概念性的“隔间”内。BPOS旨在通过一种更符合人类认知和组织活动结构的方式来设计和执行软件，从而简化修改和功能添加的难度。文章进一步阐述，典型的业务流程常常被手册化为工作流，而传统的业务系统是将这些工作流的元素（业务手册、业务系统、输入信息）分散实现的。BPOS则倡导将这三者统一为一个整体，具体表现为一个包含业务手册、输入信息字段以及下一环节负责人联系信息的文档。这个文档本身即是BPOS的应用，当被传递给相关人员时，即可驱动业务流程的执行。

作者强调，BPOS并非必须通过开发传统意义上的程序或系统来实现。该文件本身就可以作为“可执行软件”被人类执行，其中业务手册相当于人类执行的程序，输入字段则扮演数据存储的角色。更进一步，BPOS也可以成为人工智能（AI）的“可执行软件”。AI可以读取业务手册、理解任务，并自主执行部分任务或辅助人类执行。AI还可以根据人类的反馈调整交互方式，例如通过聊天界面、打开编辑器或生成临时应用程序来方便人类操作。完成任务后，AI可将文件传递给下一环节的负责人。

文章指出，文件格式应考虑AI的可处理性，Markdown格式被视为一个典型示例。BPOS通过允许组织直接创建或修改文件来添加或修改业务流程，无需开发程序，从而大大降低了流程改进的门槛。在业务手册中包含疑问或改进请求的联系点，有助于知识的集中和流程的持续改进。AI可以自动化或辅助这些知识的积累和流程的修改。这种模式使组织能够快速积累知识并持续自我改进，形成“快速学习型组织”。通过AI承担学习大量手册和适应流程变化的任务，人类只需通过简化的界面执行最少必要的工作，从而提高了组织的整体效率和适应性。</description>
</item>
<item>
  <title>框架设计作为一种智力能力</title>
  <link>https://katoshi-mfacet.github.io/zh/articles/2025/06_29_Framework-Design-Ability/</link>
  <guid>https://katoshi-mfacet.github.io/zh/articles/2025/06_29_Framework-Design-Ability/</guid>
  <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
  <description>本文探讨了智力活动的不同轴线，核心在于区分“通过观察发现事实”与“通过设计发明物品和系统”这两种截然不同的智力活动。文章指出，学术活动主要以发现事实为中心，而开发则以发明创造为中心，两者在知识积累和应用上相互关联。然而，作者进一步强调，在学术领域内部也存在以设计为导向的智力活动，即“框架设计”。

框架设计被解释为创造新的概念框架，而非发现现有事实。文章以天文学中的地心说和日心说为例，说明它们并非关于事实的对错之争，而是关于选择哪种概念框架来解释观测事实，其价值判断基于实用性而非绝对正确性。牛顿力学、相对论和量子力学也被视为框架设计的范例，它们是根据不同情境的实用性而被区分使用的概念框架。作者认为，将这些称为“范式转换”不如称之为“范式发明”或“范式创新”更为贴切，因为它们增加了有用的选项，而非思维的彻底转变。

文章接着分析了这两种智力活动所需的技能组合差异。擅长通过观察进行发现的学者通常能在现有框架内获得认可，但并非所有学者都具备通过设计进行发明的技能，尤其是在学术领域内进行元级别的概念框架设计。

在此基础上，文章特别关注了软件工程师。作者认为，软件工程师在日常工作中，通过软件设计频繁地执行在元级别上重新配置抽象概念的任务，这使得他们潜在地拥有进行学术领域框架设计所需的技能组合。具备思考新设计模型的习惯的软件工程师，尤其适合将这种技能应用于高级的学术框架设计领域，通过设计发明新的抽象概念框架。</description>
</item>
</channel>
</rss>